{"version":3,"sources":["assets/istanbul.png","store/actions/loginActions.js","store/actions/actionTypes.js","utils/DataUtils.js","services/ExcelService.js","pages/customer/CustomerList.tsx","store/actions/sideNavActions.js","pages/dashboard/DashBoard.tsx","store/reducers/baseFormReducer.js","interfaces/ICustomer.tsx","pages/customer/CustomerAdd.tsx","pages/customer/CustomerAccountList.tsx","pages/customer/CustomerCurrencyExchange.tsx","pages/customer/CustomerCurrencyExchangeSimulation.tsx","pages/customer/CustomerCurrencyExchangeWithRate.tsx","pages/customer/Customer.tsx","pages/profile/Profile.tsx","pages/customer/CustomerAddNew.tsx","pages/dailyprofitadd/DailyProfitAdd.tsx","pages/endofmonthtransaction/EndOfMonthTransaction.tsx","pages/shopprofitentry/ShopProfitEntry.tsx","pages/transactionrequest/TransactionRequestList.tsx","pages/settings/ImportCustomer.tsx","pages/settings/ResetData.tsx","pages/settings/ImportBulkTransaction.tsx","pages/settings/RewindTransactions.tsx","pages/settings/EmailSendingList.tsx","pages/settings/Settings.tsx","pages/customer/CustomerAddNewSummary.tsx","pages/customer/CustomerRequestList.tsx","pages/customer/CustomerListShort.tsx","pages/customer/CustomerForExchangeWithRate.tsx","config/appConfig.tsx","pages/customer/CustomerGroup.tsx","pages/reports/CustomerTransactionReport.tsx","pages/reports/GroupSummaryReport.tsx","pages/reports/GeneralTransactionReport.tsx","pages/reports/LastFiftyTransaction.tsx","pages/reports/SmsExcelList.tsx","pages/users/UserList.tsx","services/Auth-Service.tsx","common/consts.js","ioc/types.tsx","ioc/IocContainer.tsx","pages/login/Login.tsx","store/actions/currencyActions.js","components/TopBar.js","components/SideNav.js","pages/NotFound.js","components/PrivateRouter.tsx","pages/main/Home.tsx","store/actions/loadingActions.js","App.tsx","serviceWorker.ts","store/reducers/initialStates.js","store/reducers/loginReducer.js","store/reducers/sideNavReducer.js","store/reducers/loadingReducer.js","store/reducers/currencyReducer.js","store/reducers/index.js","store/reducers/cofigureStore.js","index.tsx"],"names":["module","exports","login","userContext","type","payload","logout","setLoginContext","strToArrBuffer","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","dateToNumber","v","date1904","Date","parse","UTC","DownloadExcel","sheetName","columns","data","wb","SheetNames","Sheets","ws","range","c","r","e","R","C","cell","cellRef","XLSX","utils","encode_cell","t","z","SSF","_table","encode_range","excelSheetFromAoA","createSheetData","fileExtension","getFileExtension","fileName","getFileName","wbout","write","bookType","bookSST","saveAs","Blob","sheetData","map","column","title","forEach","row","sheetRow","itemValue","field","push","isNaN","getFileNameWithExtension","filename","extension","connect","state","isLoading","loadingReducer","totalRequest","totalRequestReducer","dispatch","actions","props","history","useHistory","useState","customers","SetCustomers","customerGroups","setCustomerGroups","groups","setGroups","useEffect","Object","entries","constructor","axios","get","appConfig","baseApiUrl","then","resJson","obj","item","id","groupName","openCustomerForm","customer","pathname","lookup","icon","tooltip","onClick","event","rowData","isFreeAction","options","actionsColumnIndex","exportButton","exportCsv","pageSize","pageSizeOptions","localization","pagination","labelDisplayedRows","header","body","emptyDataSourceMessage","filterRow","filterTooltip","toolbar","exportTitle","exportName","searchTooltip","searchPlaceholder","openSideNav","closeSideNav","loginReducer","sideNavIsOpen","sideNavReducer","currencies","currencyReducer","bindActionCreators","sideNavActions","Grid","container","spacing","xs","sm","color","variant","style","minWidth","baseFormReducer","updateArg","Function","has","_path","_value","produce","draft","set","baseCallBack","changeState","value","name","updatePath","split","incomingValue","prevState","key","customerInitialState","customerCode","customerName","defaultCurrencyId","phoneNumber","email","poolRate","isActive","customerGroupId","isJustForBalance","CustomerAdd","React","useReducer","updateState","isRedirect","updateisRedirect","updateGroups","updateForm","useCallback","target","to","FormGroup","TextField","required","label","onChange","InputLabelProps","shrink","InputLabel","Select","labelId","MenuItem","FormControlLabel","control","Checkbox","checked","flexDirection","alertify","confirm","post","success","error","CustomerAccountList","customerAccounts","initialFOrmState","customerId","transactionDate","transactionType","amount","currencyBuyingRate","currencySellingRate","fromAccountId","toAccountId","description","formState","selectedDate","setSelectedDate","maxDate","setMaxDate","saveTransaction","result","warning","validate","disabled","width","accountNo","accountBalance","position","right","find","x","DateFnsUtils","margin","format","minDate","date","KeyboardButtonProps","multiline","rows","alert","buyingRate","sellingRate","toAccBalanceAfter","fromAccBalanceAfter","createdBy","createdDate","updatedDate","status","tranRequests","setRequests","getRequests","md","maxWidth","cantSeeBalance","calculatedLastAccountBalance","marginLeft","currency","currencyCode","TabPanel","children","index","other","Typography","component","role","hidden","aria-labelledby","Box","p","a11yProps","setCustomer","setAccounts","setValue","location","AppBar","Tabs","newValue","aria-label","scrollButtons","Tab","isAdmin","Divider","CustomerCurrencyExchangeWithRate","nameSurname","username","user","setUser","getUser","initialValues","userName","password","passwordConfirm","validateOnChange","enableReinitialize","values","errors","onSubmit","formProps","handleSubmit","handleChange","onBlur","handleBlur","touched","CustomerAddNew","handleCustomerChange","bind","this","preventDefault","currentState","valueAsNumber","setState","formValue","save","Component","setCustomers","monthlyTransactions","setMonthlyTransactions","selectedCurrencies","selectedCustomer","getMaxDate","validateForm","okLabel","cancelLabel","Autocomplete","multiple","disableCloseOnSelect","limitTags","renderOption","option","selected","Fragment","marginRight","getOptionLabel","defaultValue","renderInput","params","placeholder","changeInitialState","tmpState","initialState","setInitialState","val","totalAmount","dayCount","totalProfit","selectedCustomers","setFieldValue","form","transactions","setTransactions","ImportCustomer","file","fileUploader","useRef","handleFile","reader","FileReader","rABS","readAsBinaryString","onload","bstr","read","bookVBA","wsname","sheet_to_json","tmp","readAsArrayBuffer","ref","className","accept","join","files","tmpstate","display","current","click","handleClick","ResetData","ImportBulkTransaction","console","log","startDate","EmailSendingList","initialSetting","settingKey","settingvalue","selectedSetting","setSelectedSetting","valid","render","config","projectName","screenList","link","DashBoard","displayName","icons","isVisible","onlyAdmin","CustomerList","CustomerListShort","initialGroup","selectedGroup","setSelectedGroup","CustomerRequestList","TransactionRequestList","Customer","CustomerForExchangeWithRate","DailyProfitAdd","EndOfMonthTransaction","ShopProfitEntry","lg","ExpansionPanel","square","defaultExpanded","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","endDate","setValues","defaultGroupOrder","grouping","hasBalance","defaultSort","dateStr","getTime","toString","binary_string","window","atob","len","bytes","users","setusers","initialUser","selectedUser","setselectedUser","responseCode","responseData","responseMessage","Profile","dislpayName","CustomerAddNewSummary","topBarRightButtons","AuthService","injectable","localStorage","getItem","TYPES","IAuthService","Symbol","Container","Login","authService","_isMounted","isRememberme","isLoggedIn","myJson","setItem","JSON","stringify","finally","Button","Spinner","as","animation","size","aria-hidden","Row","Form","Image","src","logo","fluid","Group","controlId","Label","Control","Check","getLoginButton","usercontext","loginActions","setCurrencies","useStyles","makeStyles","theme","root","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","easeOut","enteringScreen","menuButton","hide","drawer","flexShrink","drawerPaper","drawerHeader","padding","mixins","content","flexGrow","contentShift","anchorEl","setAnchorEl","open","Boolean","handleClose","classes","clsx","Toolbar","direction","justify","alignItems","IconButton","edge","noWrap","aria-haspopup","currentTarget","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","Link","float","backgroundColor","justifyContent","useTheme","Drawer","anchor","paper","List","ListItem","tag","button","ListItemIcon","getIcons","ListItemText","primary","NotFound","rest","from","height","marginTop","currencyActions","localstorage","context","Col","PrivateRouter","exact","path","Backdrop","zIndex","CircularProgress","setIsLoading","activeRequestCount","App","interceptors","request","use","headers","Authorization","token","Promise","reject","response","Home","loadingActions","hostname","match","isNavOpen","initialStates","action","newState","removeItem","reducers","combineReducers","configureStore","createStore","responsiveFontSizes","createMuiTheme","palette","background","default","main","secondary","store","ReactDOM","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8129dd3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/istanbul.0e57e683.png\";","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const login = (userContext) => ({\r\n  type: actionTypes.LOGIN,\r\n  payload:userContext\r\n});\r\n\r\nexport const logout = () => ({\r\n    type: actionTypes.LOGOUT,\r\n    payload:{}\r\n  });\r\n\r\nexport const setLoginContext = (userContext) => ({\r\n  type: actionTypes.SET_LOGIN_CONTEXT,\r\n  payload:userContext\r\n})","export const LOGIN = \"LOGIN\"\r\nexport const LOGOUT = \"LOGOUT\"\r\nexport const SET_LOGIN_CONTEXT = \"SET_LOGIN_CONTEXT\"\r\n\r\nexport const SIDE_NAV_OPEN = \"SIDE_NAV_OPEN\"\r\nexport const SIDE_NAV_CLOSE = \"SIDE_NAV_CLOSE\"\r\n\r\nexport const SET_ISLOADING = \"SET_ISLOADING\"\r\n\r\nexport const SET_CURRENCIES = \"SET_CURRENCIES\";","import XLSX from \"xlsx\";\r\n\r\nconst strToArrBuffer = (s) => {\r\n  var buf = new ArrayBuffer(s.length);\r\n  var view = new Uint8Array(buf);\r\n\r\n  for (var i = 0; i !== s.length; ++i) {\r\n    view[i] = s.charCodeAt(i) & 0xff;\r\n  }\r\n\r\n  return buf;\r\n};\r\n\r\nconst dateToNumber = (v, date1904) => {\r\n  if (date1904) {\r\n    v += 1462;\r\n  }\r\n\r\n  var epoch = Date.parse(v);\r\n\r\n  return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\r\n};\r\n\r\nconst excelSheetFromDataSet = (dataSet) => {\r\n  /*\r\n    Assuming the structure of dataset\r\n    {\r\n        xSteps?: number; //How many cells to skips from left\r\n        ySteps?: number; //How many rows to skips from last data\r\n        columns: [array | string]\r\n        data: [array_of_array | string|boolean|number | CellObject]\r\n        fill, font, numFmt, alignment, and border\r\n    }\r\n     */\r\n  if (dataSet === undefined || dataSet.length === 0) {\r\n    return {};\r\n  }\r\n\r\n  var ws = {};\r\n  var range = { s: { c: 10000000, r: 10000000 }, e: { c: 0, r: 0 } };\r\n  var rowCount = 0;\r\n\r\n  dataSet.forEach((dataSetItem) => {\r\n    var columns = dataSetItem.columns;\r\n    var xSteps =\r\n      typeof dataSetItem.xSteps === \"number\" ? dataSetItem.xSteps : 0;\r\n    var ySteps =\r\n      typeof dataSetItem.ySteps === \"number\" ? dataSetItem.ySteps : 0;\r\n    var data = dataSetItem.data;\r\n    if (dataSet === undefined || dataSet.length === 0) {\r\n      return;\r\n    }\r\n\r\n    rowCount += ySteps;\r\n\r\n    if (columns.length >= 0) {\r\n      columns.forEach((col, index) => {\r\n        var cellRef = XLSX.utils.encode_cell({\r\n          c: xSteps + index,\r\n          r: rowCount,\r\n        });\r\n        fixRange(range, 0, 0, rowCount, xSteps, ySteps);\r\n        getHeaderCell(col, cellRef, ws);\r\n      });\r\n\r\n      rowCount += 1;\r\n    }\r\n\r\n    for (var R = 0; R !== data.length; ++R, rowCount++) {\r\n      for (var C = 0; C !== data[R].length; ++C) {\r\n        var cellRef = XLSX.utils.encode_cell({ c: C + xSteps, r: rowCount });\r\n        fixRange(range, R, C, rowCount, xSteps, ySteps);\r\n        getCell(data[R][C], cellRef, ws);\r\n      }\r\n    }\r\n  });\r\n\r\n  if (range.s.c < 10000000) {\r\n    ws[\"!ref\"] = XLSX.utils.encode_range(range);\r\n  }\r\n\r\n  return ws;\r\n};\r\n\r\nfunction getHeaderCell(v, cellRef, ws) {\r\n  var cell = {};\r\n  var headerCellStyle = { font: { bold: true } };\r\n  cell.v = v;\r\n  cell.t = \"s\";\r\n  cell.s = headerCellStyle;\r\n  ws[cellRef] = cell;\r\n}\r\n\r\nfunction getCell(v, cellRef, ws) {\r\n  var cell = {};\r\n  if (v === null) {\r\n    return;\r\n  }\r\n  if (typeof v === \"number\") {\r\n    cell.v = v;\r\n    cell.t = \"n\";\r\n  } else if (typeof v === \"boolean\") {\r\n    cell.v = v;\r\n    cell.t = \"b\";\r\n  } else if (v instanceof Date) {\r\n    cell.t = \"n\";\r\n    cell.z = XLSX.SSF._table[14];\r\n    cell.v = dateToNumber(cell.v);\r\n  } else if (typeof v === \"object\") {\r\n    cell.v = v.value;\r\n    cell.s = v.style;\r\n  } else {\r\n    cell.v = v;\r\n    cell.t = \"s\";\r\n  }\r\n  ws[cellRef] = cell;\r\n}\r\n\r\nfunction fixRange(range, R, C, rowCount, xSteps, ySteps) {\r\n  if (range.s.r > R + rowCount) {\r\n    range.s.r = R + rowCount;\r\n  }\r\n\r\n  if (range.s.c > C + xSteps) {\r\n    range.s.c = C + xSteps;\r\n  }\r\n\r\n  if (range.e.r < R + rowCount) {\r\n    range.e.r = R + rowCount;\r\n  }\r\n\r\n  if (range.e.c < C + xSteps) {\r\n    range.e.c = C + xSteps;\r\n  }\r\n}\r\n\r\nconst excelSheetFromAoA = (data) => {\r\n  var ws = {};\r\n  var range = { s: { c: 10000000, r: 10000000 }, e: { c: 0, r: 0 } };\r\n\r\n  for (var R = 0; R !== data.length; ++R) {\r\n    for (var C = 0; C !== data[R].length; ++C) {\r\n      if (range.s.r > R) {\r\n        range.s.r = R;\r\n      }\r\n\r\n      if (range.s.c > C) {\r\n        range.s.c = C;\r\n      }\r\n\r\n      if (range.e.r < R) {\r\n        range.e.r = R;\r\n      }\r\n\r\n      if (range.e.c < C) {\r\n        range.e.c = C;\r\n      }\r\n\r\n      var cell = { v: data[R][C] };\r\n      if (cell.v === null) {\r\n        continue;\r\n      }\r\n\r\n      var cellRef = XLSX.utils.encode_cell({ c: C, r: R });\r\n      if (typeof cell.v === \"number\") {\r\n        cell.t = \"n\";\r\n      } else if (typeof cell.v === \"boolean\") {\r\n        cell.t = \"b\";\r\n      } else if (cell.v instanceof Date) {\r\n        cell.t = \"n\";\r\n        cell.z = XLSX.SSF._table[14];\r\n        cell.v = dateToNumber(cell.v);\r\n      } else {\r\n        cell.t = \"s\";\r\n      }\r\n\r\n      ws[cellRef] = cell;\r\n    }\r\n  }\r\n\r\n  if (range.s.c < 10000000) {\r\n    ws[\"!ref\"] = XLSX.utils.encode_range(range);\r\n  }\r\n\r\n  return ws;\r\n};\r\n\r\nexport {\r\n  strToArrBuffer,\r\n  dateToNumber,\r\n  excelSheetFromAoA,\r\n  excelSheetFromDataSet,\r\n};\r\n","import { saveAs } from \"file-saver\";\r\nimport XLSX from \"xlsx\";\r\nimport {\r\n  strToArrBuffer,\r\n  excelSheetFromAoA,\r\n} from \"../utils/DataUtils\";\r\n\r\nexport function DownloadExcel(sheetName, columns, data) {\r\n  const wb = {\r\n    SheetNames: [sheetName],\r\n    Sheets: {},\r\n  };\r\n  wb.Sheets[sheetName] = excelSheetFromAoA(createSheetData(columns, data));\r\n  const fileExtension = getFileExtension();\r\n  const fileName = getFileName(sheetName);\r\n  const wbout = XLSX.write(wb, {\r\n    bookType: fileExtension,\r\n    bookSST: true,\r\n    type: \"binary\",\r\n  });\r\n  saveAs(\r\n    new Blob([strToArrBuffer(wbout)], {\r\n      type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n    }),\r\n    fileName\r\n  );\r\n}\r\n\r\nconst createSheetData = (columns, data) => {\r\n  const sheetData = [columns.map((column) => column.title)];\r\n  data.forEach((row) => {\r\n    const sheetRow = [];\r\n    columns.forEach((column) => {\r\n      const itemValue = row[column.field];\r\n      sheetRow.push(isNaN(itemValue) ? itemValue || \"\" : itemValue);\r\n    });\r\n\r\n    sheetData.push(sheetRow);\r\n  });\r\n  return sheetData;\r\n};\r\n\r\nconst getFileName = (sheetName) => {\r\n  return getFileNameWithExtension(sheetName, getFileExtension());\r\n};\r\n\r\nconst getFileExtension = () => {\r\n  return \"xlsx\";\r\n};\r\nconst getFileNameWithExtension = (filename, extension) => {\r\n  return `${filename}.${extension}`;\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ICustomer } from \"../../interfaces/ICustomer\";\r\nimport MaterialTable from \"material-table\";\r\nimport { ICustomerGroup } from \"../../interfaces/ICustomerGroup\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport { connect } from \"react-redux\";\r\nimport {DownloadExcel} from '../../services/ExcelService'\r\n\r\nfunction CustomerList(props) {\r\n  let history = useHistory();\r\n  const [customers, SetCustomers] = useState([] as ICustomer[]);\r\n  const [customerGroups, setCustomerGroups] = useState({});\r\n  const [groups, setGroups] = useState({});\r\n\r\n  const getCustomer = () => {\r\n    axios\r\n      .get(appConfig.baseApiUrl + \"customer/GetAllCustomers\")\r\n      .then((resJson) => {\r\n        SetCustomers(resJson.data as ICustomer[]);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    if (Object.entries(groups).length === 0 && groups.constructor === Object)\r\n      axios\r\n        .get(appConfig.baseApiUrl + \"customer/GetCustomerGroups\")\r\n        .then((resJson) => {\r\n          setCustomerGroups(resJson.data);\r\n          var obj = {};\r\n          resJson.data.map((item: ICustomerGroup) => {\r\n            return (obj[item.id] = item.groupName);\r\n          });\r\n          setGroups(obj);\r\n        });\r\n  }, [groups]);\r\n\r\n  useEffect(() => {\r\n    if (customers.length === 0) getCustomer();\r\n  }, [customers]);\r\n\r\n\r\n  const openCustomerForm = (customer) => {\r\n    // history.push(\"/customer\", { customer,customerGroups });\r\n    history.push({pathname:\"/customer\",state:{ customer,customerGroups }})\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        title=\"Müşteri Listesi\"\r\n        columns={[\r\n          { title: \"Kodu\", field: \"id\" },\r\n          { title: \"Ad Soyadı\", field: \"customerName\" },\r\n          { title: \"Telefon\", field: \"phoneNumber\" },\r\n          { title: \"Email\", field: \"email\" },\r\n          { title: \"Havuz Oranı\", field: \"poolRate\" },\r\n          {\r\n            title: \"Müşteri Grubu\",\r\n            field: \"customerGroupId\",\r\n            lookup: groups,\r\n          },\r\n        ]}\r\n        data={customers}\r\n        actions={[\r\n          {\r\n            icon: \"edit\",\r\n            tooltip: \"Müşteri Güncelle\",\r\n            onClick: (event, rowData) => {\r\n              if ((rowData as ICustomer[]).length > 0)\r\n                openCustomerForm(rowData[0]);\r\n              else openCustomerForm(rowData);\r\n            },\r\n          },\r\n          {\r\n            icon: \"add\",\r\n            tooltip: \"Müşteri Ekle\",\r\n            isFreeAction: true,\r\n            onClick: (event) => openCustomerForm(\"\"),\r\n          },\r\n        ]}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          exportButton: true,\r\n          exportCsv :  (columns, data) =>{\r\n            DownloadExcel(\"Müşteri Listesi\",columns,data);\r\n          },\r\n          pageSize:50,\r\n          pageSizeOptions:[50,100,200]\r\n        }}\r\n        localization={{\r\n          pagination: {\r\n            labelDisplayedRows: \"{from}-{to} of {count}\",\r\n          },\r\n          header: {\r\n            actions: \"İşlemler\",\r\n          },\r\n          body: {\r\n            emptyDataSourceMessage: \"No records to display\",\r\n            filterRow: {\r\n              filterTooltip: \"Filter\",\r\n            },\r\n          },\r\n          toolbar: {\r\n            // showColumnsTitle?: string;\r\n            // showColumnsAriaLabel?: string;\r\n            exportTitle: \"Dosyaya Aktar\",\r\n            // exportAriaLabel?: string;\r\n            exportName: \"Excel'e Aktar\",\r\n            searchTooltip: \"Ara\",\r\n            searchPlaceholder: \"Aranacak kelimeyi giriniz\",\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isLoading: state.loadingReducer,\r\n    totalRequest: state.totalRequestReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerList);\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const openSideNav = () => ({\r\n  type: actionTypes.SIDE_NAV_OPEN,\r\n  payload:true\r\n});\r\n\r\nexport const closeSideNav = () => ({\r\n    type: actionTypes.SIDE_NAV_CLOSE,\r\n    payload:false\r\n  });","import { Button, Grid } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport { ICustomerGroup } from \"../../interfaces/ICustomerGroup\";\r\nimport { connect } from \"react-redux\";\r\nimport * as sideNavActions from \"../../store/actions/sideNavActions\";\r\n\r\n\r\nfunction DashBoard(props) {\r\n  let history = useHistory();\r\n  const openNewCustomer = () => {\r\n    props.actions.closeSideNav();\r\n    history.push({pathname:\"/customerAddNewSummary\",state:{ customerGroups }})\r\n  };\r\n  const goToCustomerListShort = () => {\r\n    props.actions.closeSideNav();\r\n    history.push({pathname:\"/customerListShort\",state:{ customerGroups }})\r\n  };\r\n  const goToLastFiftyTransaction = () => {\r\n    props.actions.closeSideNav();\r\n    history.push({pathname:\"/lastFiftyTransaction\",state:{ customerGroups }})\r\n  };\r\n  \r\n  const [customerGroups, setCustomerGroups] = useState({});\r\n  const [groups, setGroups] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (Object.entries(groups).length === 0 && groups.constructor === Object)\r\n      axios\r\n        .get(appConfig.baseApiUrl + \"customer/GetCustomerGroups\")\r\n        .then((resJson) => {\r\n          setCustomerGroups(resJson.data);\r\n          var obj = {};\r\n          resJson.data.map((item: ICustomerGroup) => {\r\n            return (obj[item.id] = item.groupName);\r\n          });\r\n          setGroups(obj);\r\n        });\r\n  }, [groups]);\r\n  return (\r\n    <div>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} sm={12}>\r\n          <Button color=\"primary\" onClick={() => openNewCustomer()} variant=\"contained\" style={{ minWidth:\"250px\" }}>\r\n            Yeni Müşteri Aç\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12} sm={12}>\r\n          <Button color=\"primary\" onClick={() => goToCustomerListShort()} variant=\"contained\" style={{ minWidth:\"250px\" }}>\r\n            Kurlu Giriş/Çıkış\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12} sm={12}>\r\n          <Button color=\"primary\" onClick={() => goToLastFiftyTransaction()} variant=\"contained\" style={{ minWidth:\"250px\" }}>\r\n            Son 50 İşlem\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    userContext: state.loginReducer,\r\n    sideNavIsOpen: state.sideNavReducer,\r\n    currencies: state.currencyReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      openSideNav: bindActionCreators(sideNavActions.openSideNav, dispatch),\r\n      closeSideNav: bindActionCreators(sideNavActions.closeSideNav, dispatch)\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DashBoard);","import produce from \"immer\";\r\nimport { set, has } from \"lodash\";\r\n\r\nexport function baseFormReducer(state, updateArg) {\r\n  // check if the type of update argument is a callback function\r\n  if (updateArg.constructor === Function) {\r\n    return { ...state, ...updateArg(state) };\r\n  }\r\n  if (updateArg.constructor === Object) {\r\n    if (has(updateArg, \"_path\") && has(updateArg, \"_value\")) {\r\n      const { _path, _value } = updateArg;\r\n\r\n      return produce(state, (draft) => {\r\n        set(draft, _path, _value);\r\n      });\r\n    } else {\r\n      return { ...state, ...updateArg };\r\n    }\r\n  }\r\n}\r\n\r\nexport function baseCallBack({ value, name, type }, changeState) {\r\n  const updatePath = name.split(\".\");\r\n\r\n  if (type === \"checkbox\") {\r\n    var incomingValue = (value===\"true\");\r\n    if (updatePath.length === 1) {\r\n      changeState((prevState) => ({\r\n        [name]: !prevState[name],\r\n      }));\r\n    }\r\n    if (updatePath.length > 1) {\r\n      changeState({\r\n        _path: updatePath,\r\n        _value: !incomingValue,\r\n      });\r\n    }\r\n\r\n    return;\r\n  }\r\n  if (updatePath.length === 1) {\r\n    const [key] = updatePath;\r\n\r\n    changeState({\r\n      [key]: value,\r\n    });\r\n  }\r\n  if (updatePath.length > 1) {\r\n    changeState({\r\n      _path: updatePath,\r\n      _value: value,\r\n    });\r\n  }\r\n}\r\n","export interface ICustomer {\r\n      id: number;\r\n      customerCode: string;\r\n      customerName: string;\r\n      defaultCurrencyId: number;\r\n      phoneNumber: number;\r\n      email: string;\r\n      poolRate: number;\r\n      isActive: boolean;\r\n      customerGroupId: number;\r\n      isJustForBalance: boolean;\r\n  }\r\nexport const customerInitialState: ICustomer = {\r\n\r\n      id: 0,\r\n      customerCode: \"\",\r\n      customerName: \"\",\r\n      defaultCurrencyId: 0,\r\n      phoneNumber: 0,\r\n      email: \"\",\r\n      poolRate: 0,\r\n      isActive: true,\r\n      customerGroupId: 0,\r\n      isJustForBalance: false\r\n  };","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  baseFormReducer,\r\n  baseCallBack,\r\n} from \"../../store/reducers/baseFormReducer\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  FormGroup,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  FormControlLabel,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport alertify from \"alertifyjs\";\r\nimport { customerInitialState } from \"../../interfaces/ICustomer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport appConfig from \"../../config/appConfig\";\r\n\r\ninterface IGroup {\r\n  id: number;\r\n  groupName: String;\r\n  isActive: boolean;\r\n}\r\n\r\nexport default function CustomerAdd(props) {\r\n  const save = () => {\r\n    if (state.customer) {\r\n    }\r\n    alertify.confirm(\r\n      \"Confirm Message\",\r\n      function () {\r\n        axios\r\n          .post(appConfig.baseApiUrl + \"customer/SaveCustomer\", state.customer)\r\n          .then((data) => {\r\n            alertify.success(\"Ok\");\r\n            updateisRedirect(true);\r\n          });\r\n      },\r\n      function () {\r\n        alertify.error(\"Cancel\");\r\n      }\r\n    );\r\n  };\r\n  const [state, updateState] = React.useReducer(baseFormReducer, {\r\n    customer: customerInitialState,\r\n  });\r\n  const [isRedirect, updateisRedirect] = useState(false);\r\n  const [groups, updateGroups] = useState([] as IGroup[]);\r\n  const updateForm = React.useCallback(({ target: { value, name, type } }) => {\r\n    baseCallBack({ value, name, type }, updateState);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.groups.length > 0) updateGroups(props.groups);\r\n  }, [props.groups]);\r\n  useEffect(() => {\r\n    if (props.customer.id > 0) {\r\n      baseCallBack(\r\n        { value: props.customer, name: \"customer\", type: Object },\r\n        updateState\r\n      );\r\n    }\r\n  }, [props.customer]);\r\n\r\n  if (isRedirect === true) {\r\n    return <Redirect to=\"/customerlist\" />;\r\n  }\r\n  return (\r\n    <div>\r\n      <Grid container>\r\n        <FormGroup>\r\n          <TextField\r\n            required\r\n            name=\"customer.customerName\"\r\n            value={state.customer.customerName}\r\n            label=\"Müşteri Adı Soyadı\"\r\n            onChange={updateForm}\r\n            InputLabelProps={{ shrink: true }}\r\n          />\r\n          <TextField\r\n            type=\"number\"\r\n            name=\"customer.phoneNumber\"\r\n            value={state.customer.phoneNumber || \"\"}\r\n            label=\"Telefon Numarası\"\r\n            onChange={updateForm}\r\n            InputLabelProps={{ shrink: true }}\r\n          />\r\n          <TextField\r\n            name=\"customer.email\"\r\n            value={state.customer.email}\r\n            label=\"E-Posta\"\r\n            onChange={updateForm}\r\n            InputLabelProps={{ shrink: true }}\r\n          />\r\n          <TextField\r\n            type=\"number\"\r\n            name=\"customer.poolRate\"\r\n            value={state.customer.poolRate}\r\n            label=\"Havuz Oranı\"\r\n            onChange={updateForm}\r\n            InputLabelProps={{ shrink: true }}\r\n          />\r\n          <InputLabel id=\"customerGroupId-label\" shrink={true}>\r\n            Müşteri Grubu\r\n          </InputLabel>\r\n          <Select\r\n            type=\"select\"\r\n            labelId=\"customerGroupId-label\"\r\n            name=\"customer.customerGroupId\"\r\n            value={state.customer.customerGroupId}\r\n            onChange={updateForm}\r\n            // label=\"Müşteri Grubu\"\r\n          >\r\n            <MenuItem value={0} key={0}>\r\n              Hiçbiri\r\n            </MenuItem>\r\n            {groups.map((item, i) => {\r\n              return (\r\n                <MenuItem key={i} value={item.id}>\r\n                  {item.groupName}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                name=\"customer.isActive\"\r\n                value={state.customer.isActive}\r\n                checked={state.customer.isActive}\r\n                onChange={updateForm}\r\n                color=\"primary\"\r\n              />\r\n            }\r\n            label=\"Aktif mi?\"\r\n          />\r\n          <div style={{ flexDirection: \"row\" }}>\r\n            <Button onClick={() => save()} color=\"primary\">\r\n              Kaydet\r\n            </Button>\r\n            <Button onClick={() => updateisRedirect(true)} color=\"secondary\">\r\n              İptal\r\n            </Button>\r\n          </div>\r\n        </FormGroup>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n// import axios from \"axios\";\r\n// import { useEffect, useState } from \"react\";\r\n// import appConfig from \"../../config/appConfig\";\r\nimport MaterialTable from \"material-table\";\r\n\r\nexport default function CustomerAccountList(props) {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <MaterialTable\r\n          title=\"Müşteri Hesapları Listesi\"\r\n          columns={[\r\n            { title: \"Hesap No\", field: \"accountNo\" },\r\n            { title: \"Döviz Cinsi\", field: \"currencyName\" },\r\n            { title: \"Son Bakiye\", field: \"calculatedLastAccountBalance\" },\r\n            { title: \"Havuza Çıkacak Tutar\", field: \"amountToPool\" },\r\n            { title: \"Bakiye\", field: \"accountBalance\" },\r\n          ]}\r\n          options={{ pageSize: 10, pageSizeOptions: [10, 20, 30] }}\r\n          data={props.customerAccounts}\r\n          localization={{\r\n            pagination: {\r\n              labelDisplayedRows: \"{from}-{to} of {count}\",\r\n            },\r\n            header: {\r\n              actions: \"İşlemler\",\r\n            },\r\n            body: {\r\n              emptyDataSourceMessage: \"No records to display\",\r\n              filterRow: {\r\n                filterTooltip: \"Filter\",\r\n              },\r\n            },\r\n            toolbar: {\r\n              // showColumnsTitle?: string;\r\n              // showColumnsAriaLabel?: string;\r\n              exportTitle: \"Dosyaya çıkar\",\r\n              // exportAriaLabel?: string;\r\n              // exportName?: string;\r\n              searchTooltip: \"Ara\",\r\n              searchPlaceholder: \"Aranacak kelimeyi giriniz\",\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  baseFormReducer,\r\n  baseCallBack,\r\n} from \"../../store/reducers/baseFormReducer\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  Grid,\r\n  FormGroup,\r\n  TextField,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport alertify from \"alertifyjs\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction CustomerCurrencyExchange(props) {\r\n  let history = useHistory();\r\n  const initialFOrmState = {\r\n    customerId: props.customer.id,\r\n    transactionDate: new Date(),\r\n    transactionType: 1,\r\n    amount: 0,\r\n    currencyBuyingRate: 1,\r\n    currencySellingRate: 1,\r\n    fromAccountId: 0,\r\n    toAccountId: 0,\r\n    description:\"\"\r\n  };\r\n  const [state, updateState] = React.useReducer(baseFormReducer, {\r\n    formState: initialFOrmState,\r\n  });\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());\r\n  const [maxDate, setMaxDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(appConfig.baseApiUrl + \"transaction/GetMaxTransactionDate\")\r\n      .then((resJson) => {\r\n        setMaxDate(new Date(resJson.data));\r\n      });\r\n  }, []);\r\n\r\n  const handleDateChange = (date: Date | null) => {\r\n    setSelectedDate(date);\r\n    baseCallBack(\r\n      { value: date, name: \"formState.transactionDate\", type: \"datePicker\" },\r\n      updateState\r\n    );\r\n  };\r\n  const updateForm = React.useCallback(({ target: { value, name, type } }) => {\r\n    baseCallBack({ value, name, type }, updateState);\r\n  }, []);\r\n  const setAllBalance = () => {\r\n    var acc = props.customerAccounts.find(\r\n      (x) => x.id === state.formState.fromAccountId\r\n    );\r\n\r\n    baseCallBack(\r\n      { value: acc.accountBalance, name: \"formState.amount\", type: \"number\" },\r\n      updateState\r\n    );\r\n  };\r\n  const changeTransactionType = () => {\r\n    baseCallBack(\r\n      { value: 0, name: \"formState.fromAccountId\", type: \"number\" },\r\n      updateState\r\n    );\r\n    baseCallBack(\r\n      { value: 0, name: \"formState.toAccountId\", type: \"number\" },\r\n      updateState\r\n    );\r\n  };\r\n\r\n  const validate = () => {\r\n    let result = true;\r\n    if (\r\n      state.formState.amount === 0 ||\r\n      (state.formState.transactionType === 1 &&\r\n        state.formState.toAccountId === 0) ||\r\n      (state.formState.transactionType === 2 &&\r\n        state.formState.fromAccountId === 0) ||\r\n      (state.formState.transactionType === 3 &&\r\n        (state.formState.fromAccountId === 0 ||\r\n          state.formState.toAccountId === 0))\r\n    ) {\r\n      result = false;\r\n    }\r\n    if ((maxDate > state.formState.transactionDate)) {\r\n      alertify.warning(\"Seçilen tarih son işlem tarihinden küçük olamaz\");\r\n      result = false;\r\n    }\r\n    return result;\r\n  };\r\n  const saveTransaction = () => {\r\n    if (validate()) {\r\n      axios\r\n        .post(\r\n          appConfig.baseApiUrl + \"customer/ExchangeTransfer\",\r\n          state.formState\r\n        )\r\n        .then((resJson) => {\r\n          alertify.success(\"Ok\");\r\n          history.push(\"/customerlist\");\r\n        });\r\n    } else {\r\n      alertify.error(\"Alanları Kontrol Ediniz!\");\r\n    }\r\n  };\r\n  const tranTypes = [\r\n    { id: 1, value: \"Giriş\" },\r\n    { id: 2, value: \"Çıkış\" },\r\n    { id: 3, value: \"Transfer\" },\r\n  ];\r\n  return (\r\n    <div>\r\n      {/* TODO:validasyon Yapılacak */}\r\n      <Grid container>\r\n        <FormGroup>\r\n          <InputLabel id=\"transactionType-label\" shrink={true}>\r\n            İşlem Tipi\r\n          </InputLabel>\r\n          <Select\r\n            type=\"select\"\r\n            labelId=\"transactionType-label\"\r\n            name=\"formState.transactionType\"\r\n            value={state.formState.transactionType || 0}\r\n            onChange={(target) => {\r\n              updateForm(target);\r\n              changeTransactionType();\r\n            }}\r\n          >\r\n            {tranTypes.map((item, i) => {\r\n              return (\r\n                <MenuItem key={item.id} value={item.id}>\r\n                  {item.value}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n          <TextField\r\n            type=\"number\"\r\n            name=\"formState.amount\"\r\n            value={state.formState.amount}\r\n            label=\"Tutar\"\r\n            onChange={updateForm}\r\n            InputLabelProps={{ shrink: true }}\r\n          />\r\n          <TextField\r\n            disabled={state.formState.transactionType === 1 || state.formState.transactionType === 2}\r\n            type=\"number\"\r\n            name=\"formState.currencyBuyingRate\"\r\n            value={state.formState.currencyBuyingRate}\r\n            label=\"Döviz/Altın Alış\"\r\n            onChange={updateForm}\r\n            InputLabelProps={{ shrink: true }}\r\n          />\r\n          <TextField\r\n            disabled={state.formState.transactionType === 1 || state.formState.transactionType === 2}\r\n            type=\"number\"\r\n            name=\"formState.currencySellingRate\"\r\n            value={state.formState.currencySellingRate}\r\n            label=\"Döviz/Altın Satış Parite\"\r\n            onChange={updateForm}\r\n            InputLabelProps={{ shrink: true }}\r\n          />\r\n          <div style={{ flexDirection: \"row\" }}>\r\n            <InputLabel id=\"fromAccountId-label\" shrink={true}>\r\n              Çıkış Hesabı\r\n            </InputLabel>\r\n            <Select\r\n              disabled={state.formState.transactionType === 1}\r\n              type=\"select\"\r\n              labelId=\"fromAccountId-label\"\r\n              name=\"formState.fromAccountId\"\r\n              value={state.formState.fromAccountId || 0}\r\n              onChange={updateForm}\r\n              style={{ width: 270 }}\r\n            >\r\n              <MenuItem key={0} value={0}>\r\n                Hiçbiri\r\n              </MenuItem>\r\n              {props.customerAccounts.map((item, i) => {\r\n                return (\r\n                  <MenuItem key={i} value={item.id}>\r\n                    {item.accountNo} - {item.accountBalance}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n            </Select>\r\n            <Button\r\n              disabled={state.formState.fromAccountId === 0}\r\n              style={{ position: \"absolute\", right: \"-55\" }}\r\n              onClick={() => setAllBalance()}\r\n            >\r\n              Tamamı\r\n            </Button>\r\n          </div>\r\n          <InputLabel id=\"toAccountId-label\" shrink={true}>\r\n            Giriş Hesabı\r\n          </InputLabel>\r\n          <Select\r\n            disabled={state.formState.transactionType === 2}\r\n            type=\"select\"\r\n            labelId=\"toAccountId-label\"\r\n            name=\"formState.toAccountId\"\r\n            value={state.formState.toAccountId || 0}\r\n            onChange={updateForm}\r\n          >\r\n            <MenuItem key={0} value={0}>\r\n              Hiçbiri\r\n            </MenuItem>\r\n            {props.customerAccounts.map((item, i) => {\r\n              return (\r\n                <MenuItem key={i} value={item.id}>\r\n                  {item.accountNo} - {item.accountBalance}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <KeyboardDatePicker\r\n              margin=\"normal\"\r\n              id=\"date-picker-dialog\"\r\n              name=\"formState.transactionDate\"\r\n              label=\"Date picker dialog\"\r\n              format=\"dd/MM/yyyy\"\r\n              minDate={maxDate}\r\n              value={selectedDate}\r\n              onChange={handleDateChange}\r\n              KeyboardButtonProps={{\r\n                \"aria-label\": \"change date\",\r\n              }}\r\n            />\r\n          </MuiPickersUtilsProvider>\r\n          <TextField\r\n            type=\"text\"\r\n            name=\"formState.description\"\r\n            multiline\r\n            rows={3}\r\n            value={state.formState.description}\r\n            label=\"Açıklama\"\r\n            onChange={updateForm}\r\n            InputLabelProps={{ shrink: true }}\r\n          />\r\n\r\n          <div style={{ flexDirection: \"row\" }}>\r\n            <Button onClick={() => saveTransaction()} color=\"primary\">\r\n              Kaydet\r\n            </Button>\r\n            <Button onClick={() => alert(\"cancel\")} color=\"secondary\">\r\n              İptal\r\n            </Button>\r\n          </div>\r\n        </FormGroup>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    userContext: state.loginReducer,\r\n    sideNavIsOpen: state.sideNavReducer,\r\n    currencies: state.currencyReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n    },\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CustomerCurrencyExchange);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  baseFormReducer,\r\n  baseCallBack,\r\n} from \"../../store/reducers/baseFormReducer\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  Grid,\r\n  FormGroup,\r\n  TextField,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport alertify from \"alertifyjs\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport { connect } from \"react-redux\";\r\nimport MaterialTable from \"material-table\";\r\n\r\nfunction CustomerCurrencyExchangeSimulation(props) {\r\n  const initialFOrmState = {\r\n    customerId: props.customer.id,\r\n    transactionDate: new Date(),\r\n    transactionType: 1,\r\n    amount: 0,\r\n    buyingRate: 1,\r\n    sellingRate: 1,\r\n    fromAccountId: 0,\r\n    toAccountId: 0,\r\n    toAccBalanceAfter: 0,\r\n    fromAccBalanceAfter: 0,\r\n    createdBy: props.userContext.id,\r\n    createdDate: new Date(),\r\n    updatedDate: new Date(),\r\n    status: 1,\r\n    description:\"\"\r\n  };\r\n  const [state, updateState] = React.useReducer(baseFormReducer, {\r\n    formState: initialFOrmState,\r\n  });\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());\r\n\r\n  const [tranRequests, setRequests] = useState([]);\r\n  const [maxDate, setMaxDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(appConfig.baseApiUrl + \"transaction/GetMaxTransactionDate\")\r\n      .then((resJson) => {\r\n        setMaxDate(new Date(resJson.data));\r\n      });\r\n  }, []);\r\n\r\n  const getRequests = () => {\r\n    axios\r\n      .get(\r\n        appConfig.baseApiUrl +\r\n          \"transaction/GetTransactionRequests?customerId=\" +\r\n          props.customer.id\r\n      )\r\n      .then((resJson) => {\r\n        setRequests(resJson.data);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getRequests();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const handleDateChange = (date: Date | null) => {\r\n    setSelectedDate(date);\r\n    baseCallBack(\r\n      { value: date, name: \"formState.transactionDate\", type: \"datePicker\" },\r\n      updateState\r\n    );\r\n  };\r\n  const updateForm = React.useCallback(({ target: { value, name, type } }) => {\r\n    baseCallBack({ value, name, type }, updateState);\r\n  }, []);\r\n  const setAllBalance = () => {\r\n    var acc = props.customerAccounts.find(\r\n      (x) => x.id === state.formState.fromAccountId\r\n    );\r\n\r\n    baseCallBack(\r\n      {\r\n        value: acc.calculatedLastAccountBalance,\r\n        name: \"formState.amount\",\r\n        type: \"number\",\r\n      },\r\n      updateState\r\n    );\r\n  };\r\n\r\n  const validate = () => {\r\n    let result = true;\r\n    if (\r\n      state.formState.amount === 0 ||\r\n      (state.formState.transactionType === 1 &&\r\n        state.formState.toAccountId === 0) ||\r\n      (state.formState.transactionType === 2 &&\r\n        state.formState.fromAccountId === 0) ||\r\n      (state.formState.transactionType === 3 &&\r\n        (state.formState.fromAccountId === 0 ||\r\n          state.formState.toAccountId === 0))\r\n    ) {\r\n      result = false;\r\n    }\r\n\r\n    if (maxDate > state.formState.transactionDate) {\r\n      alertify.warning(\"Seçilen tarih son işlem tarihinden küçük olamaz\");\r\n      result = false;\r\n    }\r\n\r\n    return result;\r\n  };\r\n  const changeTransactionType = () => {\r\n    baseCallBack(\r\n      { value: 0, name: \"formState.fromAccountId\", type: \"number\" },\r\n      updateState\r\n    );\r\n    baseCallBack(\r\n      { value: 0, name: \"formState.toAccountId\", type: \"number\" },\r\n      updateState\r\n    );\r\n  };\r\n\r\n  const saveTransaction = () => {\r\n    if (validate()) {\r\n      axios\r\n        .post(\r\n          appConfig.baseApiUrl + \"transaction/AddTransactionRequest\",\r\n          state.formState\r\n        )\r\n        .then((resJson) => {\r\n          alertify.success(\"Ok\");\r\n          getRequests();\r\n        });\r\n    } else {\r\n      alertify.error(\"Alanları Kontrol Ediniz!\");\r\n    }\r\n  };\r\n  const tranTypes = [\r\n    { id: 1, value: \"Giriş\" },\r\n    { id: 2, value: \"Çıkış\" },\r\n    { id: 3, value: \"Transfer\" },\r\n  ];\r\n  return (\r\n    <div>\r\n      {/* TODO:validasyon Yapılacak */}\r\n      <Grid container>\r\n        <Grid item md={3} xs={12}>\r\n          <FormGroup style={{ maxWidth: 250 }}>\r\n            <InputLabel id=\"transactionType-label\" shrink={true}>\r\n              İşlem Tipi\r\n            </InputLabel>\r\n            <Select\r\n              type=\"select\"\r\n              labelId=\"transactionType-label\"\r\n              name=\"formState.transactionType\"\r\n              value={state.formState.transactionType || 0}\r\n              onChange={(target) => {\r\n                updateForm(target);\r\n                changeTransactionType();\r\n              }}\r\n            >\r\n              {tranTypes.map((item, i) => {\r\n                return (\r\n                  <MenuItem key={item.id} value={item.id}>\r\n                    {item.value}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n            </Select>\r\n            <TextField\r\n              type=\"number\"\r\n              name=\"formState.amount\"\r\n              value={state.formState.amount}\r\n              label=\"Tutar\"\r\n              onChange={updateForm}\r\n              InputLabelProps={{ shrink: true }}\r\n            />\r\n            <TextField\r\n              disabled={state.formState.transactionType !== 3}\r\n              type=\"number\"\r\n              name=\"formState.buyingRate\"\r\n              value={state.formState.buyingRate}\r\n              label=\"Döviz/Altın Alış\"\r\n              onChange={updateForm}\r\n              InputLabelProps={{ shrink: true }}\r\n            />\r\n            <TextField\r\n              disabled={state.formState.transactionType !== 3}\r\n              type=\"number\"\r\n              name=\"formState.sellingRate\"\r\n              value={state.formState.sellingRate}\r\n              label=\"Döviz/Altın Satış Parite\"\r\n              onChange={updateForm}\r\n              InputLabelProps={{ shrink: true }}\r\n            />\r\n            <div style={{ flexDirection: \"row\" }}>\r\n              <InputLabel id=\"fromAccountId-label\" shrink={true}>\r\n                Çıkış Hesabı\r\n              </InputLabel>\r\n              <Select\r\n                disabled={state.formState.transactionType === 1}\r\n                type=\"select\"\r\n                labelId=\"fromAccountId-label\"\r\n                name=\"formState.fromAccountId\"\r\n                value={state.formState.fromAccountId || 0}\r\n                onChange={updateForm}\r\n                style={{ width: 270 }}\r\n              >\r\n                <MenuItem key={0} value={0}>\r\n                  Hiçbiri\r\n                </MenuItem>\r\n                {props.customerAccounts.map((item, i) => {\r\n                  return (\r\n                    <MenuItem key={i} value={item.id}>\r\n                      {item.accountNo} - {props.userContext.cantSeeBalance ? \"***\" : item.calculatedLastAccountBalance}\r\n                    </MenuItem>\r\n                  );\r\n                })}\r\n              </Select>\r\n              <Button\r\n                disabled={state.formState.fromAccountId === 0}\r\n                style={{ position: \"absolute\", right: \"-70\" }}\r\n                onClick={() => setAllBalance()}\r\n              >\r\n                Tamamı\r\n              </Button>\r\n            </div>\r\n            <InputLabel id=\"toAccountId-label\" shrink={true}>\r\n              Giriş Hesabı\r\n            </InputLabel>\r\n            <Select\r\n              disabled={state.formState.transactionType === 2}\r\n              type=\"select\"\r\n              labelId=\"toAccountId-label\"\r\n              name=\"formState.toAccountId\"\r\n              value={state.formState.toAccountId || 0}\r\n              onChange={updateForm}\r\n            >\r\n              <MenuItem key={0} value={0}>\r\n                Hiçbiri\r\n              </MenuItem>\r\n              {props.customerAccounts.map((item, i) => {\r\n                return (\r\n                  <MenuItem key={i} value={item.id}>\r\n                    {item.accountNo} - {props.userContext.cantSeeBalance ? \"***\" : item.calculatedLastAccountBalance}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n            </Select>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n              <KeyboardDatePicker\r\n                margin=\"normal\"\r\n                id=\"date-picker-dialog\"\r\n                name=\"formState.transactionDate\"\r\n                label=\"Date picker dialog\"\r\n                format=\"dd/MM/yyyy\"\r\n                minDate={maxDate}\r\n                value={selectedDate}\r\n                onChange={handleDateChange}\r\n                KeyboardButtonProps={{\r\n                  \"aria-label\": \"change date\",\r\n                }}\r\n              />\r\n            </MuiPickersUtilsProvider>\r\n            <TextField\r\n              type=\"text\"\r\n              name=\"formState.description\"\r\n              multiline\r\n              rows={3}\r\n              value={state.formState.description}\r\n              label=\"Açıklama\"\r\n              onChange={updateForm}\r\n              InputLabelProps={{ shrink: true }}\r\n            />\r\n\r\n            <div style={{ flexDirection: \"row\" }}>\r\n              <Button onClick={() => saveTransaction()} color=\"primary\">\r\n                Kaydet\r\n              </Button>\r\n              <Button onClick={() => alert(\"cancel\")} color=\"secondary\">\r\n                İptal\r\n              </Button>\r\n            </div>\r\n          </FormGroup>\r\n        </Grid>\r\n        <Grid item md={9} xs={12}>\r\n          <MaterialTable\r\n            style={{ marginLeft: 55 }}\r\n            title=\"Bekleyen İşlemler\"\r\n            columns={[\r\n              { title: \"İşlem Tipi\", field: \"tranSactionType\" },\r\n              { title: \"Müşteri Adı\", field: \"customerName\" },\r\n              { title: \"Tutar\", field: \"amount\" },\r\n              { title: \"Çıkış Hesabı\", field: \"fromAccount\" },\r\n              {\r\n                title: \"işlemden sonraki Bakiyesi\",\r\n                field: \"fromAccBalanceAfter\",\r\n              },\r\n              { title: \"Alış Kuru\", field: \"buyingRate\" },\r\n              { title: \"Satış Kuru\", field: \"sellingRate\" },\r\n              {\r\n                title: \"işlem Tarihi\",\r\n                field: \"transactionDate\",\r\n                type: \"date\",\r\n              },\r\n            ]}\r\n            data={tranRequests}\r\n            options={{\r\n              actionsColumnIndex: -1,\r\n            }}\r\n            localization={{\r\n              pagination: {\r\n                labelDisplayedRows: \"{from}-{to} of {count}\",\r\n              },\r\n              header: {\r\n                actions: \"İşlemler\",\r\n              },\r\n              body: {\r\n                emptyDataSourceMessage: \"No records to display\",\r\n                filterRow: {\r\n                  filterTooltip: \"Filter\",\r\n                },\r\n              },\r\n              toolbar: {\r\n                // showColumnsTitle?: string;\r\n                // showColumnsAriaLabel?: string;\r\n                exportTitle: \"Dosyaya Aktar\",\r\n                // exportAriaLabel?: string;\r\n                exportName: \"Excel'e Aktar\",\r\n                searchTooltip: \"Ara\",\r\n                searchPlaceholder: \"Aranacak kelimeyi giriniz\",\r\n              },\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    userContext: state.loginReducer,\r\n    isLoading: state.loadingReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {},\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CustomerCurrencyExchangeSimulation);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  baseFormReducer,\r\n  baseCallBack,\r\n} from \"../../store/reducers/baseFormReducer\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  Grid,\r\n  FormGroup,\r\n  TextField,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport alertify from \"alertifyjs\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction CustomerCurrencyExchange(props) {\r\n  let history = useHistory();\r\n  const initialFOrmState = {\r\n    customerId: props.customer.id,\r\n    transactionDate: new Date(),\r\n    transactionType: 4,\r\n    amount: 0,\r\n    currency:1,\r\n    currencyBuyingRate: 1,\r\n    currencySellingRate: 1,\r\n    fromAccountId: 0,\r\n    toAccountId: 0,\r\n    description:\"\"\r\n  };\r\n  const [state, updateState] = React.useReducer(baseFormReducer, {\r\n    formState: initialFOrmState,\r\n  });\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());\r\n  const [maxDate, setMaxDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    baseCallBack(\r\n      { value: props.customer.id, name: \"formState.customerId\", type: \"number\" },\r\n      updateState\r\n    );\r\n    axios\r\n      .get(appConfig.baseApiUrl + \"transaction/GetMaxTransactionDate\")\r\n      .then((resJson) => {\r\n        setMaxDate(new Date(resJson.data));\r\n      });\r\n  }, [props.customer]);\r\n\r\n  const handleDateChange = (date: Date | null) => {\r\n    setSelectedDate(date);\r\n    baseCallBack(\r\n      { value: date, name: \"formState.transactionDate\", type: \"datePicker\" },\r\n      updateState\r\n    );\r\n  };\r\n  const updateForm = React.useCallback(({ target: { value, name, type } }) => {\r\n    baseCallBack({ value, name, type }, updateState);\r\n  }, []);\r\n  const setAllBalance = () => {\r\n    var acc = props.customerAccounts.find(\r\n      (x) => x.id === state.formState.fromAccountId\r\n    );\r\n\r\n    baseCallBack(\r\n      { value: acc.accountBalance, name: \"formState.amount\", type: \"number\" },\r\n      updateState\r\n    );\r\n  };\r\n  const changeTransactionType = () => {\r\n    baseCallBack(\r\n      { value: 0, name: \"formState.fromAccountId\", type: \"number\" },\r\n      updateState\r\n    );\r\n    baseCallBack(\r\n      { value: 0, name: \"formState.toAccountId\", type: \"number\" },\r\n      updateState\r\n    );\r\n  };\r\n\r\n  const validate = () => {\r\n    let result = true;\r\n    if (\r\n      state.formState.amount === 0 ||\r\n      (state.formState.transactionType === 1 &&\r\n        state.formState.toAccountId === 0) ||\r\n      (state.formState.transactionType === 2 &&\r\n        state.formState.fromAccountId === 0) ||\r\n      (state.formState.transactionType === 3 &&\r\n        (state.formState.fromAccountId === 0 ||\r\n          state.formState.toAccountId === 0))\r\n    ) {\r\n      result = false;\r\n    }\r\n    if ((maxDate > state.formState.transactionDate)) {\r\n      alertify.warning(\"Seçilen tarih son işlem tarihinden küçük olamaz\");\r\n      result = false;\r\n    }\r\n    return result;\r\n  };\r\n  const saveTransaction = () => {\r\n    if (validate()) {\r\n      axios\r\n        .post(\r\n          appConfig.baseApiUrl + \"customer/ExchangeTransferWithRate\",\r\n          state.formState\r\n        )\r\n        .then((resJson) => {\r\n          alertify.success(\"Ok\");\r\n          history.push(\"/customerListShort\");\r\n        });\r\n    } else {\r\n      alertify.error(\"Alanları Kontrol Ediniz!\");\r\n    }\r\n  };\r\n  const tranTypes = [\r\n    { id: 4, value: \"KurluGiris\" },\r\n    { id: 5, value: \"KurluCikis\" },\r\n  ];\r\n  return (\r\n    <div>\r\n      {/* TODO:validasyon Yapılacak */}\r\n      <Grid container>\r\n        <FormGroup>\r\n          <InputLabel id=\"transactionType-label\" shrink={true}>\r\n            İşlem Tipi\r\n          </InputLabel>\r\n          <Select\r\n            type=\"select\"\r\n            labelId=\"transactionType-label\"\r\n            name=\"formState.transactionType\"\r\n            value={state.formState.transactionType || 0}\r\n            onChange={(target) => {\r\n              updateForm(target);\r\n              changeTransactionType();\r\n            }}\r\n          >\r\n            {tranTypes.map((item, i) => {\r\n              return (\r\n                <MenuItem key={item.id} value={item.id}>\r\n                  {item.value}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n          <TextField\r\n            type=\"number\"\r\n            name=\"formState.amount\"\r\n            value={state.formState.amount}\r\n            label=\"Tutar\"\r\n            onChange={updateForm}\r\n            InputLabelProps={{ shrink: true }}\r\n          />\r\n          <InputLabel id=\"currency-label\" shrink={true}>\r\n            Döviz\r\n          </InputLabel>\r\n          <Select\r\n            type=\"select\"\r\n            labelId=\"currency-label\"\r\n            name=\"formState.currency\"\r\n            value={state.formState.currency || 1}\r\n            onChange={updateForm}\r\n          >\r\n            {props.currencies.map((item, i) => {\r\n              return (\r\n                <MenuItem key={i} value={item.id}>\r\n                  {item.currencyCode}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n          <TextField\r\n            disabled={state.formState.transactionType === 1 || state.formState.transactionType === 2}\r\n            type=\"number\"\r\n            name=\"formState.currencyBuyingRate\"\r\n            value={state.formState.currencyBuyingRate}\r\n            label=\"Döviz/Altın Alış\"\r\n            onChange={updateForm}\r\n            InputLabelProps={{ shrink: true }}\r\n          />\r\n          <TextField\r\n            disabled={state.formState.transactionType === 1 || state.formState.transactionType === 2}\r\n            type=\"number\"\r\n            name=\"formState.currencySellingRate\"\r\n            value={state.formState.currencySellingRate}\r\n            label=\"Döviz/Altın Satış Parite\"\r\n            onChange={updateForm}\r\n            InputLabelProps={{ shrink: true }}\r\n          />\r\n          <InputLabel id=\"toAccountId-label\" shrink={true}>\r\n            Giriş Hesabı\r\n          </InputLabel>\r\n          <Select\r\n            disabled={state.formState.transactionType === 5}\r\n            type=\"select\"\r\n            labelId=\"toAccountId-label\"\r\n            name=\"formState.toAccountId\"\r\n            value={state.formState.toAccountId || 0}\r\n            onChange={updateForm}\r\n          >\r\n            <MenuItem key={0} value={0}>\r\n              Hiçbiri\r\n            </MenuItem>\r\n            {props.customerAccounts.map((item, i) => {\r\n              return (\r\n                <MenuItem key={i} value={item.id}>\r\n                  {item.accountNo} - {props.userContext.cantSeeBalance ? \"***\" : item.calculatedLastAccountBalance}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n          <div style={{ flexDirection: \"row\" }}>\r\n            <InputLabel id=\"fromAccountId-label\" shrink={true}>\r\n              Çıkış Hesabı\r\n            </InputLabel>\r\n            <Select\r\n              disabled={state.formState.transactionType === 4}\r\n              type=\"select\"\r\n              labelId=\"fromAccountId-label\"\r\n              name=\"formState.fromAccountId\"\r\n              value={state.formState.fromAccountId || 0}\r\n              onChange={updateForm}\r\n              style={{ width: 270 }}\r\n            >\r\n              <MenuItem key={0} value={0}>\r\n                Hiçbiri\r\n              </MenuItem>\r\n              {props.customerAccounts.map((item, i) => {\r\n                return (\r\n                  <MenuItem key={i} value={item.id}>\r\n                    {item.accountNo} - {props.userContext.cantSeeBalance ? \"***\" : item.calculatedLastAccountBalance}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n            </Select>\r\n            {/* <Button\r\n              disabled={state.formState.fromAccountId === 0}\r\n              style={{ position: \"absolute\", right: \"-55\" }}\r\n              onClick={() => setAllBalance()}\r\n            >\r\n              Tamamı\r\n            </Button> */}\r\n          </div>\r\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <KeyboardDatePicker\r\n              margin=\"normal\"\r\n              id=\"date-picker-dialog\"\r\n              name=\"formState.transactionDate\"\r\n              label=\"Date picker dialog\"\r\n              format=\"dd/MM/yyyy\"\r\n              minDate={maxDate}\r\n              value={selectedDate}\r\n              onChange={handleDateChange}\r\n              KeyboardButtonProps={{\r\n                \"aria-label\": \"change date\",\r\n              }}\r\n            />\r\n          </MuiPickersUtilsProvider>\r\n          <TextField\r\n            type=\"text\"\r\n            name=\"formState.description\"\r\n            multiline\r\n            rows={3}\r\n            value={state.formState.description}\r\n            label=\"Açıklama\"\r\n            onChange={updateForm}\r\n            InputLabelProps={{ shrink: true }}\r\n          />\r\n\r\n          <div style={{ flexDirection: \"row\" }}>\r\n            <Button onClick={() => saveTransaction()} color=\"primary\">\r\n              Kaydet\r\n            </Button>\r\n            <Button onClick={() => alert(\"cancel\")} color=\"secondary\">\r\n              İptal\r\n            </Button>\r\n          </div>\r\n        </FormGroup>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    userContext: state.loginReducer,\r\n    sideNavIsOpen: state.sideNavReducer,\r\n    currencies: state.currencyReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n    },\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CustomerCurrencyExchange);\r\n","import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Typography, Divider, AppBar, Tabs, Tab, Box } from \"@material-ui/core\";\r\nimport CustomerAdd from \"./CustomerAdd\";\r\nimport { customerInitialState } from \"../../interfaces/ICustomer\";\r\nimport CustomerAccountList from \"./CustomerAccountList\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport axios from \"axios\";\r\nimport CustomerCurrencyExchange from \"./CustomerCurrencyExchange\";\r\nimport CustomerCurrencyExchangeSimulation from \"./CustomerCurrencyExchangeSimulation\";\r\nimport { connect } from \"react-redux\";\r\nimport CustomerCurrencyExchangeWithRate from \"./CustomerCurrencyExchangeWithRate\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <Typography\r\n      component=\"div\"\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box p={3}>{children}</Box>}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nfunction Customer(props) {\r\n  const [customer, setCustomer] = React.useState(customerInitialState);\r\n  const [customerAccounts, setAccounts] = React.useState([{}]);\r\n  const [groups, setGroups] = React.useState([{}]);\r\n  const [value, setValue] = React.useState(0);\r\n  \r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    if (props.location.state) {\r\n      if (props.location.state.customer !== \"\")\r\n        setCustomer(props.location.state.customer);\r\n      setGroups(props.location.state.customerGroups);\r\n    }\r\n  }, [props.location.state]);\r\n\r\n  useEffect(() => {\r\n    if (customer.id > 0) {\r\n      axios\r\n        .get(\r\n          appConfig.baseApiUrl +\r\n            \"customer/GetCustomerAccounts?customerId=\" +\r\n            customer.id\r\n        )\r\n        .then((resJson) => {\r\n          setAccounts(resJson.data);\r\n        });\r\n    }\r\n  }, [customer, props.actions]);\r\n\r\n  return (\r\n    <div>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          aria-label=\"simple tabs example\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n        >\r\n          <Tab label=\"Genel\" {...a11yProps(0)} />\r\n          <Tab label=\"Müşteri Hesapları\" {...a11yProps(1)} \r\n          hidden = {props.userContext.cantSeeBalance}\r\n          />\r\n          <Tab\r\n            label=\"Döviz Giriş/Çıkış/Transfer\"\r\n            {...a11yProps(2)}\r\n            disabled={customer.id === 0}\r\n            hidden={!props.userContext.isAdmin}\r\n          />\r\n          <Tab\r\n            label=\"Döviz Giriş/Çıkış/Transfer Talebi\"\r\n            {...a11yProps(3)}\r\n            disabled={customer.id === 0}\r\n          />\r\n          <Tab\r\n            label=\"Kurlu Giriş Çıkış\"\r\n            {...a11yProps(3)}\r\n            disabled={customer.id === 0}\r\n          />\r\n        </Tabs>\r\n      </AppBar>\r\n      <Divider />\r\n\r\n      <TabPanel value={value} index={0}>\r\n        <CustomerAdd customer={customer} groups={groups}></CustomerAdd>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <CustomerAccountList\r\n          customerAccounts={customerAccounts}\r\n        ></CustomerAccountList>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        <CustomerCurrencyExchange\r\n          customerAccounts={customerAccounts}\r\n          customer={customer}\r\n        ></CustomerCurrencyExchange>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={3}>\r\n        <CustomerCurrencyExchangeSimulation\r\n          customerAccounts={customerAccounts}\r\n          customer={customer}\r\n        ></CustomerCurrencyExchangeSimulation>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={4}>\r\n        <CustomerCurrencyExchangeWithRate\r\n        customerAccounts={customerAccounts}\r\n        customer={customer}>\r\n        </CustomerCurrencyExchangeWithRate>\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    userContext: state.loginReducer,\r\n    isLoading: state.loadingReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Customer);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { Grid, TextField, FormGroup, Button } from \"@material-ui/core\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport alertify from \"alertifyjs\";\r\nimport appConfig from \"../../config/appConfig\";\r\n\r\nfunction Profile(props: any) {\r\n  const [user, setUser] = useState({ id: 0, nameSurname: \"\", username: \"\" });\r\n  useEffect(() => {\r\n    if (props.userContext.id > 0) {\r\n      getUser();\r\n    }\r\n  }, [props.userContext.id]);\r\n\r\n  const getUser = () => {\r\n    axios.get(appConfig.baseApiUrl + \"users/GetUser\").then((resJson) => {\r\n      setUser(resJson.data);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Grid container>\r\n        <Grid item md={3} xs={12}>\r\n          <Formik\r\n            initialValues={{\r\n              id: user.id,\r\n              nameSurname: user.nameSurname,\r\n              userName: user.username,\r\n              password: \"\",\r\n              passwordConfirm: \"\",\r\n            }}\r\n            validateOnChange={false}\r\n            enableReinitialize\r\n            validate={(values) => {\r\n              const errors = {} as any;\r\n\r\n              if (values.password !== values.passwordConfirm) {\r\n                errors.passwordConfirm = \"Girilen şifreler aynı olmalıdır\";\r\n              }\r\n\r\n              return errors;\r\n            }}\r\n            onSubmit={(values, actions) => {\r\n              axios\r\n                .post(appConfig.baseApiUrl + \"users/SaveMyProfile\", values)\r\n                .then((resJson) => {\r\n                  alertify.success(\"Başarılı\");\r\n                  getUser();\r\n                });\r\n            }}\r\n          >\r\n            {(formProps) => (\r\n              <form onSubmit={formProps.handleSubmit} style={{ maxWidth: 250 }}>\r\n                <FormGroup>\r\n                  <TextField\r\n                    name=\"nameSurname\"\r\n                    label=\"Ad Soyad\"\r\n                    value={formProps.values.nameSurname}\r\n                    onChange={formProps.handleChange}\r\n                    onBlur={formProps.handleBlur}\r\n                    InputLabelProps={{ shrink: true }}\r\n                  />\r\n                  <TextField\r\n                    name=\"userName\"\r\n                    label=\"Kullanıcı Adı\"\r\n                    value={formProps.values.userName}\r\n                    onChange={formProps.handleChange}\r\n                    onBlur={formProps.handleBlur}\r\n                    InputLabelProps={{ shrink: true }}\r\n                  />\r\n                  <TextField\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    label=\"Yeni Şifre\"\r\n                    value={formProps.values.password}\r\n                    onChange={formProps.handleChange}\r\n                    onBlur={formProps.handleBlur}\r\n                    InputLabelProps={{ shrink: true }}\r\n                  />\r\n                  <TextField\r\n                    name=\"passwordConfirm\"\r\n                    type=\"password\"\r\n                    label=\"Yeni Şifre Onayla\"\r\n                    value={formProps.values.passwordConfirm}\r\n                    onChange={formProps.handleChange}\r\n                    onBlur={formProps.handleBlur}\r\n                    InputLabelProps={{ shrink: true }}\r\n                  />\r\n                  {formProps.errors.passwordConfirm &&\r\n                  formProps.touched.passwordConfirm ? (\r\n                    <div style={{ color: \"red\" }}>\r\n                      {formProps.errors.passwordConfirm}\r\n                    </div>\r\n                  ) : null}\r\n                  <Button color=\"primary\" type=\"submit\">\r\n                    Kaydet\r\n                  </Button>\r\n                </FormGroup>\r\n              </form>\r\n            )}\r\n          </Formik>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    userContext: state.loginReducer,\r\n    isLoading: state.loadingReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  FormGroup,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  Checkbox\r\n} from \"@material-ui/core\";\r\nimport {\r\n  ICustomerGroup,\r\n} from \"../../interfaces/ICustomerGroup\";\r\nimport { ICustomer, customerInitialState } from \"../../interfaces/ICustomer\";\r\nimport axios from \"axios\";\r\nimport alertify from \"alertifyjs\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport appConfig from '../../config/appConfig';\r\n\r\ninterface CustomerAddNewState {\r\n  customer: ICustomer;\r\n  groups: ICustomerGroup[];\r\n}\r\ninterface CustomerAddNewprops {}\r\n\r\nexport default class CustomerAddNew extends Component<\r\n  CustomerAddNewprops,\r\n  CustomerAddNewState\r\n> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      customer: customerInitialState,\r\n      groups: []\r\n    };\r\n    this.handleCustomerChange = this.handleCustomerChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.customer) {\r\n    }\r\n  }\r\n  handleCustomerChange(e: any) {\r\n    e.preventDefault();\r\n    const { customer } = { ...this.state };\r\n    const currentState = customer;\r\n    const { name, value } = e.target;\r\n    var newValue;\r\n    if(e.target.type ===\"checkbox\")\r\n    {\r\n      \r\n        newValue = e.target.checked;\r\n    }\r\n    else if (e.target.type ===\"number\")\r\n    {\r\n        newValue =  e.target.valueAsNumber;\r\n    }\r\n    else\r\n    {\r\n        newValue = value;\r\n    }\r\n    currentState[name] = newValue;\r\n\r\n    this.setState({ customer: currentState });\r\n    // this.setState((state) => {\r\n    //     return {[name]: value} as CustomerAddNewState;\r\n    //   });\r\n  }\r\n\r\n  save() {\r\n    if (this.state.customer) {\r\n    }\r\n    var formValue: ICustomer = this.state.customer;\r\n    alertify.confirm(\r\n      \"Confirm Message\",\r\n      function() {\r\n        axios\r\n          .post(appConfig.baseApiUrl + \"customer/SaveCustomer\", formValue)\r\n          .then(data => {\r\n            alertify.success(\"Ok\");\r\n          });\r\n      },\r\n      function() {\r\n        alertify.error(\"Cancel\");\r\n      }\r\n    );\r\n  }\r\n  //   handleChange\"(field, name, e) {\r\n  //     this.setState({[field]: { ...this.state[field], [name]:e.target.value } } as CustomerAddNewState);\r\n  //   }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Grid container>\r\n          <FormGroup>\r\n            <TextField\r\n              required\r\n              name=\"customerName\"\r\n              value={this.state.customer.customerName}\r\n              label=\"Müşteri Adı Soyadı\"\r\n              onChange={this.handleCustomerChange}\r\n              // onChange={this.handleChange.bind(this, 'lineup', el)}\r\n              InputLabelProps={{ shrink: true }}\r\n            />\r\n            <TextField\r\n              type=\"number\"\r\n              name=\"phoneNumber\"\r\n              value={this.state.customer.phoneNumber}\r\n              label=\"Telefon Numarası\"\r\n              onChange={this.handleCustomerChange}\r\n              InputLabelProps={{ shrink: true }}\r\n            />\r\n            <TextField\r\n              name=\"email\"\r\n              value={this.state.customer.email}\r\n              label=\"E-Posta\"\r\n              onChange={this.handleCustomerChange}\r\n              InputLabelProps={{ shrink: true }}\r\n            />\r\n            <TextField\r\n              type=\"number\"\r\n              name=\"poolRate\"\r\n              value={this.state.customer.poolRate}\r\n              label=\"Havuz Oranı\"\r\n              onChange={this.handleCustomerChange}\r\n              InputLabelProps={{ shrink: true }}\r\n            />\r\n            <InputLabel id=\"customerGroupId-label\" shrink={true}>\r\n              Müşteri Grubu\r\n            </InputLabel>\r\n            <Select\r\n              type=\"select\"\r\n              labelId=\"customerGroupId-label\"\r\n              name=\"customer.customerGroupId\"\r\n              value={this.state.customer.customerGroupId}\r\n              onChange={this.handleCustomerChange}\r\n              // label=\"Müşteri Grubu\"\r\n            >\r\n              <MenuItem value={0} key={0}>\r\n                Hiçbiri\r\n              </MenuItem>\r\n              {this.state.groups.map((item, i) => {\r\n                return (\r\n                  <MenuItem key={item.id} value={item.id}>\r\n                    {item.groupName}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n            </Select>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  name=\"isActive\"\r\n                  checked={this.state.customer.isActive}\r\n                  onChange={this.handleCustomerChange}\r\n                  value={this.state.customer.isActive}\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label=\"Primary\"\r\n            />\r\n            <Button onClick={() => this.save()} color=\"primary\">\r\n              Kaydet\r\n            </Button>\r\n          </FormGroup>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  FormGroup,\r\n  TextField,\r\n  Checkbox,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport {\r\n  baseFormReducer,\r\n  baseCallBack,\r\n} from \"../../store/reducers/baseFormReducer\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport MaterialTable from \"material-table\";\r\nimport alertify from \"alertifyjs\";\r\n\r\nfunction DailyProfitAdd(props) {\r\n  let history = useHistory();\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());\r\n  const [customers, setCustomers] = useState([]);\r\n  const [monthlyTransactions, setMonthlyTransactions] = useState([]);\r\n  const [state, updateState] = React.useReducer(baseFormReducer, {\r\n    formState: {\r\n      buyingRate: 0,\r\n      sellingRate: 0,\r\n      selectedCurrencies: [],\r\n      selectedCustomer: [],\r\n      transactionDate: new Date(),\r\n    },\r\n  });\r\n  const [maxDate, setMaxDate] = useState(new Date());\r\n  useEffect(() => {\r\n    getMaxDate();\r\n  }, []);\r\n\r\n  const getMaxDate = ()=> {\r\n    axios\r\n      .get(appConfig.baseApiUrl + \"transaction/GetMaxTransactionDate\")\r\n      .then((resJson) => {\r\n        setMaxDate(new Date(resJson.data));\r\n      });\r\n  }\r\n\r\n  const updateForm = React.useCallback(({ target: { value, name, type } }) => {\r\n    baseCallBack({ value, name, type }, updateState);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(appConfig.baseApiUrl + \"customer/GetAllCustomers\")\r\n      .then((resJson) => {\r\n        setCustomers(resJson.data);\r\n        baseCallBack(\r\n          {\r\n            value: resJson.data,\r\n            name: \"formState.selectedCustomer\",\r\n            type: \"datePicker\",\r\n          },\r\n          updateState\r\n        );\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    baseCallBack(\r\n      {\r\n        value: props.currencies,\r\n        name: \"formState.selectedCurrencies\",\r\n        type: \"datePicker\",\r\n      },\r\n      updateState\r\n    );\r\n  }, [props.currencies]);\r\n\r\n  const handleDateChange = (date: Date | null) => {\r\n    setSelectedDate(date);\r\n    baseCallBack(\r\n      { value: date, name: \"formState.transactionDate\", type: \"datePicker\" },\r\n      updateState\r\n    );\r\n  };\r\n  const validateForm = (): Boolean => {\r\n    var result = true;\r\n    if (state.formState.buyingRate < 1 || state.formState.sellingRate < 1)\r\n      result = false;\r\n    if (maxDate > state.formState.transactionDate) {\r\n      result = false;\r\n      alertify.warning(\"Seçilen tarih son işlem tarihinden küçük olamaz\");\r\n    }\r\n    if (!result) alertify.error(\"Alanları kontrol ediniz\");\r\n\r\n    return result;\r\n  };\r\n  const save = () => {\r\n    if (validateForm())\r\n      axios\r\n        .post(\r\n          appConfig.baseApiUrl + \"transaction/AddBulkTransaction\",\r\n          state.formState\r\n        )\r\n        .then((resJson) => {\r\n          alertify.success(\"İşlem Başarılı\");\r\n          setMonthlyTransactions(resJson.data);\r\n          getMaxDate();\r\n        });\r\n  };\r\n\r\n  const cancel = () => {\r\n    history.push(\"/home\");\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item md={3} xs={12}>\r\n        <FormGroup>\r\n          <TextField\r\n            type=\"number\"\r\n            name=\"formState.buyingRate\"\r\n            value={state.formState.buyingRate}\r\n            label=\"Alış Kuru\"\r\n            onChange={updateForm}\r\n            InputLabelProps={{ shrink: true }}\r\n          />\r\n          <TextField\r\n            type=\"number\"\r\n            name=\"formState.sellingRate\"\r\n            value={state.formState.sellingRate}\r\n            label=\"Satış Kuru\"\r\n            onChange={updateForm}\r\n            InputLabelProps={{ shrink: true }}\r\n          />\r\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <KeyboardDatePicker\r\n              margin=\"normal\"\r\n              id=\"date-picker-dialog\"\r\n              name=\"formState.transactionDate\"\r\n              label=\"İşlem Tarihi\"\r\n              format=\"dd/MM/yyyy\"\r\n              value={selectedDate}\r\n              onChange={handleDateChange}\r\n              okLabel=\"Seç\"\r\n              cancelLabel=\"İptal\"\r\n              minDate={maxDate}\r\n              KeyboardButtonProps={{\r\n                \"aria-label\": \"change date\",\r\n              }}\r\n            />\r\n          </MuiPickersUtilsProvider>\r\n          <Autocomplete\r\n            multiple\r\n            id=\"formState.selectedCurrencies\"\r\n            disableCloseOnSelect={true}\r\n            options={props.currencies}\r\n            limitTags={2}\r\n            renderOption={(option, { selected }) => (\r\n              <React.Fragment>\r\n                <Checkbox\r\n                  // icon={icon}\r\n                  // checkedIcon={checkedIcon}\r\n                  style={{ marginRight: 8 }}\r\n                  checked={selected}\r\n                />\r\n                {option.currencyCode}\r\n              </React.Fragment>\r\n            )}\r\n            getOptionLabel={(option) => option.currencyCode}\r\n            defaultValue={state.formState.selectedCurrencies}\r\n            onChange={(event, value, target) =>\r\n              updateForm({\r\n                target: {\r\n                  value: value,\r\n                  name: \"formState.selectedCurrencies\",\r\n                  type: \"Autocomplete\",\r\n                },\r\n              })\r\n            }\r\n            value={state.formState.selectedCurrencies}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                variant=\"standard\"\r\n                label=\"Döviz Cinsi\"\r\n                placeholder=\"Döviz Cinsi\"\r\n              />\r\n            )}\r\n          />\r\n          <Autocomplete\r\n            multiple\r\n            disableCloseOnSelect={true}\r\n            id=\"formState.selectedCustomers\"\r\n            options={customers}\r\n            limitTags={2}\r\n            renderOption={(option, { selected }) => (\r\n              <React.Fragment>\r\n                <Checkbox style={{ marginRight: 8 }} checked={selected} />\r\n                {option.customerName}\r\n              </React.Fragment>\r\n            )}\r\n            getOptionLabel={(option) => option.customerName}\r\n            defaultValue={state.selectedCustomer}\r\n            onChange={(event, value, target) =>\r\n              updateForm({\r\n                target: {\r\n                  value: value,\r\n                  name: \"formState.selectedCustomer\",\r\n                  type: \"Autocomplete\",\r\n                },\r\n              })\r\n            }\r\n            value={state.formState.selectedCustomer}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                variant=\"standard\"\r\n                label=\"Müşteri\"\r\n                placeholder=\"Seçili Müşteri\"\r\n              />\r\n            )}\r\n          />\r\n          <Grid container>\r\n            <Grid item xs={6}>\r\n              <Button color=\"primary\" onClick={() => save()}>\r\n                Kaydet\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Button color=\"secondary\" onClick={() => cancel()}>\r\n                İptal\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </FormGroup>\r\n      </Grid>\r\n      <Grid item md={9} xs={12}>\r\n        <MaterialTable\r\n          title=\"Müşteri Listesi\"\r\n          columns={[\r\n            { title: \"Tarih\", field: \"transactionDate\", type: \"date\" },\r\n            { title: \"Alış Oranı\", field: \"buyingRate\" },\r\n            { title: \"Satış Oranı\", field: \"sellingRate\" },\r\n          ]}\r\n          data={monthlyTransactions}\r\n          options={{\r\n            actionsColumnIndex: -1,\r\n            exportButton: true,\r\n          }}\r\n          localization={{\r\n            pagination: {\r\n              labelDisplayedRows: \"{from}-{to} of {count}\",\r\n            },\r\n            header: {\r\n              actions: \"İşlemler\",\r\n            },\r\n            body: {\r\n              emptyDataSourceMessage: \"No records to display\",\r\n              filterRow: {\r\n                filterTooltip: \"Filter\",\r\n              },\r\n            },\r\n            toolbar: {\r\n              exportTitle: \"Dosyaya çıkar\",\r\n              searchTooltip: \"Ara\",\r\n              searchPlaceholder: \"Aranacak kelimeyi giriniz\",\r\n            },\r\n          }}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    currencies: state.currencyReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DailyProfitAdd);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  FormGroup,\r\n  TextField,\r\n  Checkbox,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport axios from \"axios\";\r\nimport alertify from \"alertifyjs\";\r\nimport { Formik } from \"formik\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction EndOfMonthTransaction(props) {\r\n  const [customers, setCustomers] = useState([]);\r\n  let history = useHistory();\r\n  useEffect(() => {\r\n    axios\r\n      .get(appConfig.baseApiUrl + \"customer/GetAllCustomers\")\r\n      .then((resJson) => {\r\n        setCustomers(resJson.data);\r\n        changeInitialState(\"selectedCustomer\", resJson.data);\r\n      });\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const changeInitialState = (name, value) => {\r\n    var tmpState = { ...initialState };\r\n    tmpState[name] = value;\r\n    setInitialState(tmpState);\r\n  };\r\n  const [initialState, setInitialState] = useState({\r\n    selectedDate: new Date(),\r\n    selectedCustomer: [] as any,\r\n  });\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Grid item md={3} sm={6} xs={12}>\r\n        <Formik\r\n          initialValues={{\r\n            selectedDate: initialState.selectedDate,\r\n            selectedCustomer: initialState.selectedCustomer,\r\n          }}\r\n          enableReinitialize\r\n          onSubmit={(values, actions) => {\r\n            axios\r\n              .post(\r\n                appConfig.baseApiUrl + \"customer/MakeMonthEndProcess\",\r\n                values\r\n              )\r\n              .then((resJson) => {\r\n                alertify.success(\"Başarılı bir şekilde eklenmiştir.\");\r\n                history.push(\"/home\")\r\n              });\r\n          }}\r\n        >\r\n          {(props) => (\r\n            <form onSubmit={props.handleSubmit}>\r\n              <FormGroup>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <KeyboardDatePicker\r\n                    margin=\"normal\"\r\n                    id=\"date-picker-dialog\"\r\n                    name=\"selectedDate\"\r\n                    label=\"İşlem Tarihi\"\r\n                    format=\"dd/MM/yyyy\"\r\n                    value={props.initialValues.selectedDate}\r\n                    onChange={(val) => {\r\n                      changeInitialState(\"selectedDate\", val);\r\n                    }}\r\n                    okLabel=\"Seç\"\r\n                    cancelLabel=\"İptal\"\r\n                    KeyboardButtonProps={{\r\n                      \"aria-label\": \"change date\",\r\n                    }}\r\n                  />\r\n                </MuiPickersUtilsProvider>\r\n                <Autocomplete\r\n                  multiple\r\n                  id=\"formState.selectedCustomers\"\r\n                  options={customers}\r\n                  limitTags={2}\r\n                  renderOption={(option, { selected }) => (\r\n                    <React.Fragment>\r\n                      <Checkbox style={{ marginRight: 8 }} checked={selected} />\r\n                      {option.customerName}\r\n                    </React.Fragment>\r\n                  )}\r\n                  getOptionLabel={(option) => option.customerName}\r\n                  defaultValue={props.initialValues.selectedCustomer}\r\n                  onChange={(event, value, target) => {\r\n                    changeInitialState(\"selectedCustomer\", value);\r\n                  }}\r\n                  value={props.initialValues.selectedCustomer}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      variant=\"standard\"\r\n                      label=\"Müşteri\"\r\n                      placeholder=\"Seçili Müşteri\"\r\n                    />\r\n                  )}\r\n                />\r\n                <Button color=\"primary\" type=\"submit\">\r\n                  Hesap Kesimi Yap\r\n                </Button>\r\n              </FormGroup>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n      currencies: state.currencyReducer,\r\n    };\r\n  }\r\n  \r\n  function mapDispatchToProps(dispatch) {\r\n    return {\r\n      actions: {},\r\n    };\r\n  }\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(EndOfMonthTransaction);","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  FormGroup,\r\n  TextField,\r\n  Checkbox,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport axios from \"axios\";\r\nimport alertify from \"alertifyjs\";\r\nimport { Formik, Field } from \"formik\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction ShopProfitEntry(props) {\r\n  const [customers, setCustomers] = useState([]);\r\n  let history = useHistory();\r\n  useEffect(() => {\r\n    axios\r\n      .get(appConfig.baseApiUrl + \"customer/GetAllCustomers\")\r\n      .then((resJson) => {\r\n        setCustomers(resJson.data);\r\n        changeInitialState(\"selectedCustomer\", resJson.data);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const changeInitialState = (name, value) => {\r\n    var tmpState = { ...initialState };\r\n    tmpState[name] = value;\r\n    setInitialState(tmpState);\r\n  };\r\n\r\n  const [initialState, setInitialState] = useState({\r\n    totalAmount: 0,\r\n    dayCount: 0,\r\n    totalProfit: 0,\r\n    selectedDate: new Date(),\r\n    selectedCurrencies: props.currencies,\r\n    selectedCustomer: [] as any,\r\n  });\r\n  return (\r\n    <div>\r\n      <Grid container spacing={2}>\r\n        <Grid item md={3} sm={6} xs={12}>\r\n          <Formik\r\n            initialValues={{\r\n              totalAmount: 0,\r\n              dayCount: 0,\r\n              totalProfit: 0,\r\n              selectedDate: initialState.selectedDate,\r\n              selectedCurrencies: initialState.selectedCurrencies,\r\n              selectedCustomers: initialState.selectedCustomer,\r\n            }}\r\n            validateOnChange={false}\r\n            enableReinitialize\r\n            validate={(values) => {\r\n              const errors = {} as any;\r\n              if (!values.dayCount || values.dayCount < 1) {\r\n                errors.dayCount = \"Required\";\r\n                alertify.error(\"Alanları Kontrol Ediniz!\");\r\n              } else if (!values.totalAmount || values.totalAmount < 1) {\r\n                errors.dayCount = \"Required\";\r\n                alertify.error(\"Alanları Kontrol Ediniz!\");\r\n              } else if (!values.totalProfit || values.totalProfit < 1) {\r\n                errors.dayCount = \"Required\";\r\n                alertify.error(\"Alanları Kontrol Ediniz!\");\r\n              }\r\n\r\n              return errors;\r\n            }}\r\n            onSubmit={(values, actions) => {\r\n              axios\r\n                .post(\r\n                  appConfig.baseApiUrl + \"transaction/AddShopProfit\",\r\n                  values\r\n                )\r\n                .then((resJson) => {\r\n                  alertify.success(\"İşlem Başarılı!\");\r\n                  history.push(\"/home\");\r\n                });\r\n            }}\r\n          >\r\n            {(formProps) => (\r\n              <form onSubmit={formProps.handleSubmit}>\r\n                <FormGroup>\r\n                  <TextField\r\n                    type=\"number\"\r\n                    defaultValue={formProps.initialValues.totalAmount}\r\n                    name=\"totalAmount\"\r\n                    label=\"Toplam Tutar\"\r\n                    onChange={formProps.handleChange}\r\n                    onBlur={formProps.handleBlur}\r\n                    InputLabelProps={{ shrink: true }}\r\n                  />\r\n                  <TextField\r\n                    type=\"number\"\r\n                    defaultValue={formProps.initialValues.dayCount}\r\n                    name=\"dayCount\"\r\n                    label=\"Gün Sayısı\"\r\n                    onChange={formProps.handleChange}\r\n                    InputLabelProps={{ shrink: true }}\r\n                  />\r\n                  <TextField\r\n                    type=\"number\"\r\n                    defaultValue={formProps.initialValues.totalProfit}\r\n                    name=\"totalProfit\"\r\n                    label=\"Kar Tutarı\"\r\n                    onChange={formProps.handleChange}\r\n                    InputLabelProps={{ shrink: true }}\r\n                  />\r\n                  <Field name={\"selectedDate\"} id={\"selectedDate\"}>\r\n                    {({ field: { value }, form: { setFieldValue } }) => (\r\n                      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                        <KeyboardDatePicker\r\n                          margin=\"normal\"\r\n                          id=\"date-picker-dialog\"\r\n                          name=\"selectedDate\"\r\n                          label=\"İşlem Tarihi\"\r\n                          format=\"dd/MM/yyyy\"\r\n                          value={value}\r\n                          onChange={(val) => {\r\n                            setFieldValue(\"selectedDate\", val);\r\n                          }}\r\n                          okLabel=\"Seç\"\r\n                          cancelLabel=\"İptal\"\r\n                          KeyboardButtonProps={{\r\n                            \"aria-label\": \"change date\",\r\n                          }}\r\n                        />\r\n                      </MuiPickersUtilsProvider>\r\n                    )}\r\n                  </Field>\r\n                  <Field name={\"selectedCurrencies\"} id={\"selectedCurrencies\"}>\r\n                    {({ field: { value }, form: { setFieldValue } }) => (\r\n                      <Autocomplete\r\n                        multiple\r\n                        id=\"selectedCurrencies\"\r\n                        options={props.currencies}\r\n                        limitTags={2}\r\n                        renderOption={(option, { selected }) => (\r\n                          <React.Fragment>\r\n                            <Checkbox\r\n                              style={{ marginRight: 8 }}\r\n                              checked={selected}\r\n                            />\r\n                            {option.currencyCode}\r\n                          </React.Fragment>\r\n                        )}\r\n                        getOptionLabel={(option) => option.currencyCode}\r\n                        defaultValue={value}\r\n                        onChange={(event, value, target) => {\r\n                          setFieldValue(\"selectedCurrencies\", value);\r\n                        }}\r\n                        value={value}\r\n                        renderInput={(params) => (\r\n                          <TextField\r\n                            {...params}\r\n                            variant=\"standard\"\r\n                            label=\"Döviz Cinsi\"\r\n                            placeholder=\"Döviz Cinsi\"\r\n                          />\r\n                        )}\r\n                      />\r\n                    )}\r\n                  </Field>\r\n                  <Field name={\"selectedCustomers\"} id={\"selectedCustomers\"}>\r\n                    {({ field: { value }, form: { setFieldValue } }) => (\r\n                      <Autocomplete\r\n                        multiple\r\n                        id=\"selectedCustomers\"\r\n                        options={customers}\r\n                        limitTags={2}\r\n                        renderOption={(option, { selected }) => (\r\n                          <React.Fragment>\r\n                            <Checkbox\r\n                              style={{ marginRight: 8 }}\r\n                              checked={selected}\r\n                            />\r\n                            {option.customerName}\r\n                          </React.Fragment>\r\n                        )}\r\n                        getOptionLabel={(option) => option.customerName}\r\n                        defaultValue={value}\r\n                        onChange={(event, value, target) => {\r\n                          setFieldValue(\"selectedCustomers\", value);\r\n                        }}\r\n                        value={value}\r\n                        renderInput={(params) => (\r\n                          <TextField\r\n                            {...params}\r\n                            variant=\"standard\"\r\n                            label=\"Müşteri\"\r\n                            placeholder=\"Seçili Müşteri\"\r\n                          />\r\n                        )}\r\n                      />\r\n                    )}\r\n                  </Field>\r\n                  <Button color=\"primary\" type=\"submit\">\r\n                    Kaydet\r\n                  </Button>\r\n                </FormGroup>\r\n              </form>\r\n            )}\r\n          </Formik>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    currencies: state.currencyReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopProfitEntry);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport MaterialTable from \"material-table\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport { connect } from \"react-redux\";\r\nimport alertify from \"alertifyjs\";\r\n\r\nfunction TransactionRequestList(props) {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const getTransactions = () => {\r\n    axios\r\n      .get(appConfig.baseApiUrl + \"transaction/GetTransactionRequests\")\r\n      .then((resJson) => {\r\n        setTransactions(resJson.data);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTransactions();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        title=\"Talep Edilen İşlem Listesi\"\r\n        columns={[\r\n          { title: \"İşlem Tipi\", field: \"tranSactionType\" },\r\n          { title: \"Müşteri Adı\", field: \"customerName\" },\r\n          { title: \"Tutar\", field: \"amount\" },\r\n          { title: \"Giriş Hesabı\", field: \"toAccount\" },\r\n          { title: \"Çıkış Hesabı\", field: \"fromAccount\" },\r\n          { title: \"Alış Kuru\", field: \"buyingRate\" },\r\n          { title: \"Satış Kuru\", field: \"sellingRate\" },\r\n          { title: \"Statü\", field: \"status\" },\r\n          { title: \"Açan Kullanıcı\", field: \"createdUser\" },\r\n          { title: \"işlem Tarihi\", field: \"transactionDate\", type: \"date\" },\r\n          //   { title: \"Açılış Tarihi\", field: \"createdDate\" },\r\n        ]}\r\n        data={transactions}\r\n        actions={[\r\n          {\r\n            icon: \"check\",\r\n            tooltip: \"Onayla\",\r\n            onClick: (event, rowData) => {\r\n              alertify.confirm(\r\n                \"Onay\",\r\n                \"Tüm Bilgiler Silinecektir onaylıyor musunuz?\",\r\n                function () {\r\n                  axios\r\n                    .post(\r\n                      appConfig.baseApiUrl +\r\n                        \"transaction/ApproveTransactionRequest\",\r\n                      rowData\r\n                    )\r\n                    .then((resJson) => {\r\n                      setTransactions(resJson.data);\r\n                      alertify.success(\"İşlem Onaylandı!\");\r\n                    });\r\n                },\r\n                function () {\r\n                  alertify.warning(\"İptal Edildi\");\r\n                }\r\n              );\r\n            },\r\n          },\r\n          {\r\n            icon: \"clear\",\r\n            tooltip: \"Reddet\",\r\n            onClick: (event, rowData) => {\r\n              alertify.confirm(\r\n                \"Onay\",\r\n                \"Tüm Bilgiler Silinecektir onaylıyor musunuz?\",\r\n                function () {\r\n                  axios\r\n                    .post(\r\n                      appConfig.baseApiUrl +\r\n                        \"transaction/RejectTransactionRequest\",\r\n                      rowData\r\n                    )\r\n                    .then((resJson) => {\r\n                      setTransactions(resJson.data);\r\n                      alertify.error(\"İşlem Reddedildi!\");\r\n                    });\r\n                },\r\n                function () {\r\n                  alertify.warning(\"İptal Edildi\");\r\n                }\r\n              );\r\n            },\r\n          },\r\n        ]}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          exportButton: true,\r\n          pageSize: 10,\r\n        }}\r\n        localization={{\r\n          pagination: {\r\n            labelDisplayedRows: \"{from}-{to} of {count}\",\r\n          },\r\n          header: {\r\n            actions: \"İşlemler\",\r\n          },\r\n          body: {\r\n            emptyDataSourceMessage: \"No records to display\",\r\n            filterRow: {\r\n              filterTooltip: \"Filter\",\r\n            },\r\n          },\r\n          toolbar: {\r\n            exportTitle: \"Dosyaya çıkar\",\r\n            searchTooltip: \"Ara\",\r\n            searchPlaceholder: \"Aranacak kelimeyi giriniz\",\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isLoading: state.loadingReducer,\r\n    totalRequest: state.totalRequestReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {},\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TransactionRequestList);\r\n","import React, { useRef } from \"react\";\r\nimport XLSX from \"xlsx\";\r\nimport MaterialTable from \"material-table\";\r\nimport { DownloadExcel } from \"../../services/ExcelService\";\r\nimport axios from \"axios\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport alertify from \"alertifyjs\";\r\n\r\nexport default function ImportCustomer(props) {\r\n  let history = useHistory();\r\n  const [state, setState] = React.useState({\r\n    file: {} as any,\r\n    data: [],\r\n  });\r\n  const [customers, setCustomer] = React.useState([]);\r\n  const fileUploader = useRef(null) as any;\r\n  const handleChange = (e) => {\r\n    const files = e.target.files;\r\n    var tmpstate = state;\r\n    tmpstate.file = files[0];\r\n    if (files && files[0]) setState(tmpstate);\r\n    handleFile();\r\n  };\r\n  const handleClick = (e) => {\r\n    fileUploader.current?.click();\r\n  };\r\n  const handleFile = () => {\r\n    const reader = new FileReader();\r\n    const rABS = !!reader.readAsBinaryString;\r\n    reader.onload = (e) => {\r\n      const bstr = e.target?.result;\r\n      const wb = XLSX.read(bstr, {\r\n        type: rABS ? \"binary\" : \"array\",\r\n        bookVBA: true,\r\n      });\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      const data = XLSX.utils.sheet_to_json(ws);\r\n      var tmp = state;\r\n      tmp.data = data;\r\n      setState(tmp);\r\n      setCustomer(data);\r\n    };\r\n\r\n    if (rABS) {\r\n      reader.readAsBinaryString(state.file);\r\n    } else {\r\n      reader.readAsArrayBuffer(state.file);\r\n    }\r\n  };\r\n  const saveBulkCustomer = () => {\r\n    axios\r\n      .post(appConfig.baseApiUrl + \"settings/SaveBulkCustomer\", state.data)\r\n      .then((resJson) => {\r\n        if (resJson.data === \"Ok\") {\r\n          alertify.success(\"Başarılı\");\r\n          history.push(\"/customerlist\");\r\n        }\r\n      });\r\n  };\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"file\"\r\n        ref={fileUploader}\r\n        className=\"form-control\"\r\n        id=\"file\"\r\n        accept={[\r\n          \"xlsx\",\r\n          \"xlsb\",\r\n          \"xlsm\",\r\n          \"xls\",\r\n          \"xml\",\r\n          \"csv\",\r\n          \"txt\",\r\n          \"ods\",\r\n          \"fods\",\r\n          \"uos\",\r\n          \"sylk\",\r\n          \"dif\",\r\n          \"dbf\",\r\n          \"prn\",\r\n          \"qpw\",\r\n          \"123\",\r\n          \"wb*\",\r\n          \"wq*\",\r\n          \"html\",\r\n          \"htm\",\r\n        ]\r\n          .map(function (x) {\r\n            return \".\" + x;\r\n          })\r\n          .join(\",\")}\r\n        onChange={handleChange}\r\n        style={{ display: \"none\" }}\r\n      />\r\n      <MaterialTable\r\n        title=\"Müşteri Listesi\"\r\n        columns={[\r\n          { title: \"Ad Soyadı\", field: \"customerName\" },\r\n          { title: \"Telefon\", field: \"phoneNumber\", type: \"numeric\" },\r\n          { title: \"Email\", field: \"email\" },\r\n          { title: \"Havuz Oranı\", field: \"poolRate\", type: \"numeric\" },\r\n          {\r\n            title: \"Müşteri Grubu\",\r\n            field: \"customerGroupId\",\r\n            lookup: props.groups,\r\n          },\r\n          { title: \"Tarih\", field: \"transactionDate\", type: \"date\" },\r\n          { title: \"TL\", field: \"tl\", type: \"numeric\" },\r\n          { title: \"USD\", field: \"usd\", type: \"numeric\" },\r\n          { title: \"EUR\", field: \"eur\", type: \"numeric\" },\r\n          { title: \"GAU\", field: \"gau\", type: \"numeric\" },\r\n          { title: \"GBP\", field: \"gbp\", type: \"numeric\" },\r\n        ]}\r\n        data={customers}\r\n        actions={[\r\n          {\r\n            icon: \"add\",\r\n            tooltip: \"Dosya Ekle\",\r\n            isFreeAction: true,\r\n            onClick: (event) => handleClick(event),\r\n          },\r\n          {\r\n            icon: \"save\",\r\n            tooltip: \"Kaydet\",\r\n            isFreeAction: true,\r\n            onClick: (event) =>\r\n              alertify.confirm(\r\n                \"Onay\",\r\n                \"Müşteriler yüklenecek onaylıyor musunuz ?\",\r\n                function () {\r\n                  saveBulkCustomer();\r\n                },\r\n                function () {\r\n                  alertify.error(\"İptal Edildi\");\r\n                }\r\n              ),\r\n          },\r\n        ]}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          exportButton: false,\r\n          exportCsv: (columns, data) => {\r\n            DownloadExcel(\"Müşteri Listesi\", columns, data);\r\n          },\r\n          pageSize: 50,\r\n          pageSizeOptions: [50, 100, 200],\r\n        }}\r\n        localization={{\r\n          pagination: {\r\n            labelDisplayedRows: \"{from}-{to} of {count}\",\r\n          },\r\n          header: {\r\n            actions: \"İşlemler\",\r\n          },\r\n          body: {\r\n            emptyDataSourceMessage: \"No records to display\",\r\n            filterRow: {\r\n              filterTooltip: \"Filter\",\r\n            },\r\n          },\r\n          toolbar: {\r\n            // showColumnsTitle?: string;\r\n            // showColumnsAriaLabel?: string;\r\n            exportTitle: \"Dosyaya Aktar\",\r\n            // exportAriaLabel?: string;\r\n            exportName: \"Excel'e Aktar\",\r\n            searchTooltip: \"Ara\",\r\n            searchPlaceholder: \"Aranacak kelimeyi giriniz\",\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { FormGroup, Button, Grid } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport alertify from \"alertifyjs\";\r\nimport appConfig from \"../../config/appConfig\";\r\n\r\nexport default function ResetData(props) {\r\n  const resetAllData = () => {\r\n    alertify.confirm(\r\n      \"Onay\",\r\n      \"Tüm Bilgiler Silinecektir onaylıyor musunuz?\",\r\n      function () {\r\n        axios\r\n          .post(appConfig.baseApiUrl + \"settings/DeleteAllData\")\r\n          .then((resJson) => {\r\n            alertify.success(\"İşlem Başarılı\");\r\n          });\r\n      },\r\n      function () {\r\n        alertify.error(\"İptal Edildi\");\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Grid container>\r\n        <FormGroup>\r\n          <Button color=\"primary\" onClick={() => resetAllData()}>\r\n            Tüm Bilgileri Sıfırla{\" \"}\r\n          </Button>\r\n        </FormGroup>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport XLSX from \"xlsx\";\r\nimport MaterialTable from \"material-table\";\r\nimport { DownloadExcel } from \"../../services/ExcelService\";\r\nimport axios from \"axios\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport alertify from \"alertifyjs\";\r\n\r\nexport default function ImportBulkTransaction(props) {\r\n  const [state, setState] = React.useState({\r\n    file: {} as any,\r\n    data: [],\r\n  });\r\n  const [customers, setCustomer] = React.useState([]);\r\n  const fileUploader = useRef(null) as any;\r\n  const handleChange = (e) => {\r\n    const files = e.target.files;\r\n    var tmpstate = state;\r\n    tmpstate.file = files[0];\r\n    if (files && files[0]) setState(tmpstate);\r\n    handleFile();\r\n  };\r\n  const handleClick = (e) => {\r\n    fileUploader.current?.click();\r\n  };\r\n  const handleFile = () => {\r\n    const reader = new FileReader();\r\n    const rABS = !!reader.readAsBinaryString;\r\n    reader.onload = (e) => {\r\n      const bstr = e.target?.result;\r\n      const wb = XLSX.read(bstr, {\r\n        type: rABS ? \"binary\" : \"array\",\r\n        bookVBA: true,\r\n      });\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      const data = XLSX.utils.sheet_to_json(ws);\r\n      var tmp = state;\r\n      tmp.data = data;\r\n      console.log(data);\r\n      setState(tmp);\r\n      setCustomer(data);\r\n    };\r\n\r\n    if (rABS) {\r\n      reader.readAsBinaryString(state.file);\r\n    } else {\r\n      reader.readAsArrayBuffer(state.file);\r\n    }\r\n  };\r\n  const saveBulkCustomer = () => {\r\n    axios\r\n      .post(appConfig.baseApiUrl + \"settings/ImportBulkTransaction\", state.data)\r\n      .then((resJson) => {\r\n        if (resJson.data === \"Ok\") {\r\n          alertify.success(\"Başarılı\");\r\n        }\r\n      });\r\n  };\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"file\"\r\n        ref={fileUploader}\r\n        className=\"form-control\"\r\n        id=\"file\"\r\n        accept={[\r\n          \"xlsx\",\r\n          \"xlsb\",\r\n          \"xlsm\",\r\n          \"xls\",\r\n          \"xml\",\r\n          \"csv\",\r\n          \"txt\",\r\n          \"ods\",\r\n          \"fods\",\r\n          \"uos\",\r\n          \"sylk\",\r\n          \"dif\",\r\n          \"dbf\",\r\n          \"prn\",\r\n          \"qpw\",\r\n          \"123\",\r\n          \"wb*\",\r\n          \"wq*\",\r\n          \"html\",\r\n          \"htm\",\r\n        ]\r\n          .map(function (x) {\r\n            return \".\" + x;\r\n          })\r\n          .join(\",\")}\r\n        onChange={handleChange}\r\n        style={{ display: \"none\" }}\r\n      />\r\n      <MaterialTable\r\n        title=\"İşlem Listesi\"\r\n        columns={[\r\n          { title: \"customer\", field: \"customer\" },\r\n          { title: \"transactionDate\", field: \"transactionDate\"},\r\n          { title: \"transactionType\", field: \"transactionType\" },\r\n          { title: \"currency\", field: \"currency\" },\r\n          { title: \"amount\", field: \"amount\", type: \"numeric\" },\r\n          { title: \"buyingRate\", field: \"buyingRate\" },\r\n          { title: \"sellingRate\", field: \"sellingRate\" },\r\n          { title: \"fromCurrency\", field: \"fromCurrency\" },\r\n          { title: \"toCurrency\", field: \"toCurrency\" },\r\n        ]}\r\n        data={customers}\r\n        actions={[\r\n          {\r\n            icon: \"add\",\r\n            tooltip: \"Dosya Ekle\",\r\n            isFreeAction: true,\r\n            onClick: (event) => handleClick(event),\r\n          },\r\n          {\r\n            icon: \"save\",\r\n            tooltip: \"Kaydet\",\r\n            isFreeAction: true,\r\n            onClick: (event) =>\r\n              alertify.confirm(\r\n                \"Onay\",\r\n                \"İşlemler yüklenecek onaylıyor musunuz ?\",\r\n                function () {\r\n                  saveBulkCustomer();\r\n                },\r\n                function () {\r\n                  alertify.error(\"İptal Edildi\");\r\n                }\r\n              ),\r\n          },\r\n        ]}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          exportButton: false,\r\n          exportCsv: (columns, data) => {\r\n            DownloadExcel(\"Müşteri Listesi\", columns, data);\r\n          },\r\n          pageSize: 50,\r\n          pageSizeOptions: [50, 100, 200],\r\n        }}\r\n        localization={{\r\n          pagination: {\r\n            labelDisplayedRows: \"{from}-{to} of {count}\",\r\n          },\r\n          header: {\r\n            actions: \"İşlemler\",\r\n          },\r\n          body: {\r\n            emptyDataSourceMessage: \"No records to display\",\r\n            filterRow: {\r\n              filterTooltip: \"Filter\",\r\n            },\r\n          },\r\n          toolbar: {\r\n            // showColumnsTitle?: string;\r\n            // showColumnsAriaLabel?: string;\r\n            exportTitle: \"Dosyaya Aktar\",\r\n            // exportAriaLabel?: string;\r\n            exportName: \"Excel'e Aktar\",\r\n            searchTooltip: \"Ara\",\r\n            searchPlaceholder: \"Aranacak kelimeyi giriniz\",\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Grid, FormGroup, Button } from \"@material-ui/core\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport axios from \"axios\";\r\nimport alertify from \"alertifyjs\";\r\nimport { Formik } from \"formik\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction RewindTransactions(props) {\r\n  const changeInitialState = (name, value) => {\r\n    var tmpState = { ...initialState };\r\n    tmpState[name] = value;\r\n    setInitialState(tmpState);\r\n  };\r\n  const [initialState, setInitialState] = useState({\r\n    selectedDate: new Date(),\r\n    selectedCustomer: [] as any,\r\n  });\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Grid item md={3} sm={6} xs={12}>\r\n        <Formik\r\n          initialValues={{\r\n            startDate: initialState.selectedDate,\r\n          }}\r\n          enableReinitialize\r\n          onSubmit={(values, actions) => {\r\n            alertify.confirm(\r\n              \"Onay\",\r\n              \"Seçilen tarihe geri dönülecek onaylıyor musunuz ?\",\r\n              function () {\r\n                axios\r\n                  .post(\r\n                    appConfig.baseApiUrl + \"settings/RewindTransactions\",\r\n                    values\r\n                  )\r\n                  .then((resJson) => {\r\n                    alertify.success(\"Başarılı bir şekilde tarihe geri dönülmüştür.\");\r\n                  });\r\n              },\r\n              function () {\r\n                alertify.error(\"İptal Edildi\");\r\n              }\r\n            );\r\n          }}\r\n        >\r\n          {(props) => (\r\n            <form onSubmit={props.handleSubmit}>\r\n              <FormGroup>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <KeyboardDatePicker\r\n                    margin=\"normal\"\r\n                    id=\"date-picker-dialog\"\r\n                    name=\"selectedDate\"\r\n                    label=\"İşlem Tarihi\"\r\n                    format=\"dd/MM/yyyy\"\r\n                    value={props.initialValues.startDate}\r\n                    onChange={(val) => {\r\n                      changeInitialState(\"selectedDate\", val);\r\n                    }}\r\n                    okLabel=\"Seç\"\r\n                    cancelLabel=\"İptal\"\r\n                    KeyboardButtonProps={{\r\n                      \"aria-label\": \"change date\",\r\n                    }}\r\n                  />\r\n                </MuiPickersUtilsProvider>\r\n                <Button color=\"primary\" type=\"submit\">\r\n                  Tarihe Geri Dön\r\n                </Button>\r\n              </FormGroup>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    currencies: state.currencyReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RewindTransactions);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  FormGroup,\r\n  TextField,\r\n  Checkbox,\r\n  Button,\r\n  FormControlLabel,\r\n} from \"@material-ui/core\";\r\nimport { Formik } from \"formik\";\r\nimport MaterialTable from \"material-table\";\r\nimport alertify from \"alertifyjs\";\r\nimport axios from \"axios\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport { DownloadExcel } from \"../../services/ExcelService\";\r\n\r\nexport default function EmailSendingList() {\r\n  const [groups, setGroups] = useState([]);\r\n  const initialSetting = {\r\n    id: 0,\r\n    settingKey: \"ToEmail\",\r\n    settingvalue: \"\",\r\n    isActive: true,\r\n  };\r\n  const [selectedSetting, setSelectedSetting] = useState(initialSetting);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(appConfig.baseApiUrl + \"settings/GetMailSettings\")\r\n      .then((resJson) => {\r\n        console.log(resJson);\r\n        setGroups(resJson.data);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid item md={3} xs={12}>\r\n        <Formik\r\n          initialValues={{\r\n            id: selectedSetting.id,\r\n            settingKey: selectedSetting.settingKey,\r\n            settingvalue : selectedSetting.settingvalue,\r\n            isActive: selectedSetting.isActive,\r\n          }}\r\n          validateOnChange={false}\r\n          enableReinitialize\r\n          validate={(values) => {\r\n            const errors = {} as any;\r\n            if (values.settingvalue === \"\") {\r\n              errors.groupName = \"Required\";\r\n              alertify.error(\"Alanları Kontrol Ediniz!\");\r\n            }\r\n\r\n            return errors;\r\n          }}\r\n          onSubmit={(values, actions) => {\r\n            axios\r\n              .post(appConfig.baseApiUrl + \"settings/SaveSetting\", values)\r\n              .then((resJson) => {\r\n                setGroups(resJson.data);\r\n                setSelectedSetting(initialSetting);\r\n                alertify.success(\"İşlem Başarılı!\");\r\n              });\r\n          }}\r\n        >\r\n          {(formProps) => (\r\n            <form onSubmit={formProps.handleSubmit} style={{ maxWidth: 250 }}>\r\n              <FormGroup>\r\n                <TextField\r\n                  name=\"settingvalue\"\r\n                  label=\"Email\"\r\n                  value={formProps.values.settingvalue}\r\n                  onChange={formProps.handleChange}\r\n                  onBlur={formProps.handleBlur}\r\n                  InputLabelProps={{ shrink: true }}\r\n                />\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"isActive\"\r\n                      value={formProps.values.isActive}\r\n                      checked={formProps.values.isActive}\r\n                      onChange={formProps.handleChange}\r\n                    />\r\n                  }\r\n                  label=\"Aktif mi ?\"\r\n                />\r\n                <Button color=\"primary\" type=\"submit\">\r\n                  Kaydet\r\n                </Button>\r\n              </FormGroup>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </Grid>\r\n      <Grid item md={9} xs={12}>\r\n        <MaterialTable\r\n          title=\"Grup Listesi\"\r\n          columns={[\r\n            { title: \"Id\", field: \"id\" },\r\n            { title: \"Değeri\", field: \"settingvalue\" },\r\n            { title: \"Aktif mi?\", field: \"isActive\" },\r\n          ]}\r\n          data={groups}\r\n          actions={[\r\n            {\r\n              icon: \"edit\",\r\n              tooltip: \"Email Güncelle\",\r\n              onClick: (event, rowData) => {\r\n                setSelectedSetting(rowData as any);\r\n              },\r\n            },\r\n            {\r\n              icon: \"add\",\r\n              tooltip: \"Email Ekle\",\r\n              isFreeAction: true,\r\n              onClick: (event) => setSelectedSetting(initialSetting),\r\n            },\r\n          ]}\r\n          options={{\r\n            actionsColumnIndex: -1,\r\n            exportButton: true,\r\n            exportCsv: (columns, data) => {\r\n              DownloadExcel(\"Email Listesi\", columns, data);\r\n            },\r\n            pageSize: 50,\r\n            pageSizeOptions: [50, 100, 200],\r\n          }}\r\n          localization={{\r\n            pagination: {\r\n              labelDisplayedRows: \"{from}-{to} of {count}\",\r\n            },\r\n            header: {\r\n              actions: \"İşlemler\",\r\n            },\r\n            body: {\r\n              emptyDataSourceMessage: \"No records to display\",\r\n              filterRow: {\r\n                filterTooltip: \"Filter\",\r\n              },\r\n            },\r\n            toolbar: {\r\n              // showColumnsTitle?: string;\r\n              // showColumnsAriaLabel?: string;\r\n              exportTitle: \"Dosyaya Aktar\",\r\n              // exportAriaLabel?: string;\r\n              exportName: \"Excel'e Aktar\",\r\n              searchTooltip: \"Ara\",\r\n              searchPlaceholder: \"Aranacak kelimeyi giriniz\",\r\n            },\r\n          }}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ImportCustomer from \"./ImportCustomer\";\r\nimport { Typography, Divider, AppBar, Tabs, Tab, Box } from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport axios from \"axios\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport ResetData from \"./ResetData\";\r\nimport ImportBulkTransaction from \"./ImportBulkTransaction\";\r\nimport RewindTransactions from \"./RewindTransactions\";\r\nimport EmailSendingList from \"./EmailSendingList\";\r\n\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <Typography\r\n      component=\"div\"\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box p={3}>{children}</Box>}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nexport default function Settings() {\r\n  const [value, setValue] = React.useState(0);\r\n  const [groups, setGroups] = React.useState({});\r\n  \r\n  React.useEffect(() => {\r\n    if (Object.entries(groups).length === 0 && groups.constructor === Object)\r\n      axios\r\n        .get(appConfig.baseApiUrl + \"customer/GetCustomerGroups\")\r\n        .then((resJson) => {\r\n          var obj = {};\r\n          resJson.data.map((item: any) => {\r\n            return (obj[item.id] = item.groupName);\r\n          });\r\n          setGroups(obj);\r\n        });\r\n  }, [groups]);\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          aria-label=\"simple tabs example\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"on\"\r\n        >\r\n          <Tab label=\"Müşteri Girişi\" {...a11yProps(0)} />\r\n          <Tab label=\"Bilgileri Sıfırla\" {...a11yProps(1)} />\r\n          <Tab label=\"Tarihe Geri Dön\" {...a11yProps(2)} />\r\n          <Tab label=\"Toplu İşlem Girişi\" {...a11yProps(3)} />\r\n          <Tab label=\"Mail Gidecek Kişiler\" {...a11yProps(4)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <Divider />\r\n\r\n      <TabPanel value={value} index={0}>\r\n        <ImportCustomer groups={groups}></ImportCustomer>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <ResetData>\r\n          \r\n        </ResetData>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        <RewindTransactions/>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={3}>\r\n        <ImportBulkTransaction/>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={4}>\r\n        <EmailSendingList />\r\n          \r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  baseFormReducer,\r\n  baseCallBack,\r\n} from \"../../store/reducers/baseFormReducer\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\n\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  FormGroup,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  FormControlLabel,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport alertify from \"alertifyjs\";\r\nimport { customerInitialState } from \"../../interfaces/ICustomer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport * as sideNavActions from \"../../store/actions/sideNavActions\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\n\r\ninterface IGroup {\r\n  id: number;\r\n  groupName: String;\r\n  isActive: boolean;\r\n}\r\n\r\nfunction CustomerAddNewSummary(props) {\r\n  const save = () => {\r\n    let valid = true;\r\n    if (!state.customer.amount) {\r\n      alertify.error(\"Tutar giriniz\");\r\n      valid = false;\r\n    }\r\n    if (state.customer.customerName === \"\") {\r\n      alertify.error(\"İsim giriniz\");\r\n      valid = false;\r\n    }\r\n    if (!state.customer.currency) {\r\n      alertify.error(\"Döviz giriniz\");\r\n      valid = false;\r\n    }\r\n\r\n    if(!valid) return;\r\n    alertify.confirm(\r\n      \"Confirm Message\",\r\n      function () {\r\n        axios\r\n          .post(appConfig.baseApiUrl + \"customer/CreateCustomerWithBalance\", state.customer)\r\n          .then((data) => {\r\n            alertify.success(\"Ok\");\r\n            updateisRedirect(true);\r\n          });\r\n      },\r\n      function () {\r\n        alertify.error(\"Cancel\");\r\n      }\r\n    );\r\n  };\r\n  const [state, updateState] = React.useReducer(baseFormReducer, {\r\n    customer: {\r\n      id: 0,\r\n      customerCode: \"\",\r\n      customerName: \"\",\r\n      defaultCurrencyId: 0,\r\n      phoneNumber: 0,\r\n      email: \"\",\r\n      poolRate: 20,\r\n      isActive: true,\r\n      customerGroupId: 0,\r\n      isJustForBalance: false,\r\n      transactionDate: new Date()\r\n    },\r\n  });\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());\r\n  const [isRedirect, updateisRedirect] = useState(false);\r\n  const [groups, updateGroups] = useState([] as IGroup[]);\r\n  const updateForm = React.useCallback(({ target: { value, name, type } }) => {\r\n    baseCallBack({ value, name, type }, updateState);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.location.state) {\r\n      console.log(props.currencies);\r\n      updateGroups(props.location.state.customerGroups);\r\n    }\r\n  }, [props.location.state]);\r\n  const handleDateChange = (date: Date | null) => {\r\n    setSelectedDate(date);\r\n    baseCallBack(\r\n      { value: date, name: \"customer.transactionDate\", type: \"datePicker\" },\r\n      updateState\r\n    );\r\n  };\r\n  if (isRedirect === true) {\r\n    return <Redirect to=\"/customerlist\" />;\r\n  }\r\n  return (\r\n    <div>\r\n      <Grid container>\r\n        <FormGroup>\r\n          <TextField\r\n            required\r\n            name=\"customer.customerName\"\r\n            value={state.customer.customerName}\r\n            label=\"Müşteri Adı Soyadı\"\r\n            onChange={updateForm}\r\n            InputLabelProps={{ shrink: true }}\r\n          />\r\n\r\n          {/* <TextField\r\n            type=\"number\"\r\n            name=\"customer.poolRate\"\r\n            value={state.customer.poolRate}\r\n            label=\"Havuz Oranı\"\r\n            onChange={updateForm}\r\n            InputLabelProps={{ shrink: true }}\r\n          /> */}\r\n          <TextField\r\n            type=\"number\"\r\n            name=\"customer.amount\"\r\n            value={state.customer.amount}\r\n            label=\"Giriş Tutarı\"\r\n            onChange={updateForm}\r\n            InputLabelProps={{ shrink: true }}\r\n          />\r\n          <InputLabel id=\"currency-label\" shrink={true}>\r\n            Döviz\r\n          </InputLabel>\r\n          <Select\r\n            type=\"select\"\r\n            labelId=\"currency-label\"\r\n            name=\"customer.currency\"\r\n            value={state.customer.currency}\r\n            onChange={updateForm}\r\n          >\r\n            {props.currencies.map((item, i) => {\r\n              return (\r\n                <MenuItem key={i} value={item.id}>\r\n                  {item.currencyCode}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n          <InputLabel id=\"customerGroupId-label\" shrink={true}>\r\n            Müşteri Grubu\r\n          </InputLabel>\r\n          <Select\r\n            type=\"select\"\r\n            labelId=\"customerGroupId-label\"\r\n            name=\"customer.customerGroupId\"\r\n            value={state.customer.customerGroupId}\r\n            onChange={updateForm}\r\n            // label=\"Müşteri Grubu\"\r\n          >\r\n            <MenuItem value={0} key={0}>\r\n              Hiçbiri\r\n            </MenuItem>\r\n            {groups.map((item, i) => {\r\n              return (\r\n                <MenuItem key={i} value={item.id}>\r\n                  {item.groupName}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <KeyboardDatePicker\r\n              margin=\"normal\"\r\n              id=\"date-picker-dialog\"\r\n              name=\"customer.transactionDate\"\r\n              label=\"İşlem Tarihi\"\r\n              format=\"dd/MM/yyyy\"\r\n              value={selectedDate}\r\n              onChange={handleDateChange}\r\n              okLabel=\"Seç\"\r\n              cancelLabel=\"İptal\"\r\n              // minDate={new Date()}\r\n              KeyboardButtonProps={{\r\n                \"aria-label\": \"change date\",\r\n              }}\r\n            />\r\n          </MuiPickersUtilsProvider>\r\n          <div style={{ flexDirection: \"row\" }}>\r\n            <Button onClick={() => save()} color=\"primary\">\r\n              Kaydet\r\n            </Button>\r\n            <Button onClick={() => updateisRedirect(true)} color=\"secondary\">\r\n              İptal\r\n            </Button>\r\n          </div>\r\n        </FormGroup>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    userContext: state.loginReducer,\r\n    sideNavIsOpen: state.sideNavReducer,\r\n    currencies: state.currencyReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      openSideNav: bindActionCreators(sideNavActions.openSideNav, dispatch),\r\n      closeSideNav: bindActionCreators(sideNavActions.closeSideNav, dispatch),\r\n    },\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CustomerAddNewSummary);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport MaterialTable from \"material-table\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport { connect } from \"react-redux\";\r\nimport alertify from \"alertifyjs\";\r\n\r\nfunction CustomerRequestList(props) {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const getTransactions = () => {\r\n    axios\r\n      .get(appConfig.baseApiUrl + \"customer/GetCustomerRequestList\")\r\n      .then((resJson) => {\r\n        setTransactions(resJson.data);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTransactions();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        title=\"Müşteri Açma Talep Listesi\"\r\n        columns={[\r\n          { title: \"Müşteri Adı\", field: \"customerName\" },\r\n          { title: \"Tutar\", field: \"amount\" },\r\n          { title: \"işlem Tarihi\", field: \"transactionDate\", type: \"date\" },\r\n          { title: \"Döviz\", field: \"currency\" },\r\n          { title: \"Statü\", field: \"status\" },\r\n        ]}\r\n        data={transactions}\r\n        actions={[\r\n          {\r\n            icon: \"check\",\r\n            tooltip: \"Onayla\",\r\n            onClick: (event, rowData:any) => {\r\n              alertify.confirm(\r\n                \"Onay\",\r\n                \"Tüm Bilgiler Silinecektir onaylıyor musunuz?\",\r\n                function () {\r\n                  axios\r\n                    .post(\r\n                      appConfig.baseApiUrl +\r\n                        \"Customer/ApproveCustomerRequest?id=\"+rowData.id,\r\n                      rowData\r\n                    )\r\n                    .then((resJson) => {\r\n                      setTransactions(resJson.data);\r\n                      alertify.success(\"İşlem Onaylandı!\");\r\n                    });\r\n                },\r\n                function () {\r\n                  alertify.warning(\"İptal Edildi\");\r\n                }\r\n              );\r\n            },\r\n          },\r\n          {\r\n            icon: \"clear\",\r\n            tooltip: \"Reddet\",\r\n            onClick: (event, rowData:any) => {\r\n              alertify.confirm(\r\n                \"Onay\",\r\n                \"Tüm Bilgiler Silinecektir onaylıyor musunuz?\",\r\n                function () {\r\n                  axios\r\n                    .post(\r\n                      appConfig.baseApiUrl +\r\n                        \"Customer/RejectCustomerRequest?id=\"+rowData.id,\r\n                      null\r\n                    )\r\n                    .then((resJson) => {\r\n                      setTransactions(resJson.data);\r\n                      alertify.error(\"İşlem Reddedildi!\");\r\n                    });\r\n                },\r\n                function () {\r\n                  alertify.warning(\"İptal Edildi\");\r\n                }\r\n              );\r\n            },\r\n          },\r\n        ]}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          exportButton: true,\r\n          pageSize: 10,\r\n        }}\r\n        localization={{\r\n          pagination: {\r\n            labelDisplayedRows: \"{from}-{to} of {count}\",\r\n          },\r\n          header: {\r\n            actions: \"İşlemler\",\r\n          },\r\n          body: {\r\n            emptyDataSourceMessage: \"No records to display\",\r\n            filterRow: {\r\n              filterTooltip: \"Filter\",\r\n            },\r\n          },\r\n          toolbar: {\r\n            exportTitle: \"Dosyaya çıkar\",\r\n            searchTooltip: \"Ara\",\r\n            searchPlaceholder: \"Aranacak kelimeyi giriniz\",\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isLoading: state.loadingReducer,\r\n    totalRequest: state.totalRequestReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {},\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CustomerRequestList);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ICustomer } from \"../../interfaces/ICustomer\";\r\nimport MaterialTable from \"material-table\";\r\nimport { ICustomerGroup } from \"../../interfaces/ICustomerGroup\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport { connect } from \"react-redux\";\r\nimport {DownloadExcel} from '../../services/ExcelService'\r\n\r\nfunction CustomerListShort(props) {\r\n  let history = useHistory();\r\n  const [customers, SetCustomers] = useState([] as ICustomer[]);\r\n  const [customerGroups, setCustomerGroups] = useState({});\r\n  const [groups, setGroups] = useState({});\r\n\r\n  const getCustomer = () => {\r\n    axios\r\n      .get(appConfig.baseApiUrl + \"customer/GetAllCustomers\")\r\n      .then((resJson) => {\r\n        SetCustomers(resJson.data as ICustomer[]);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    if (Object.entries(groups).length === 0 && groups.constructor === Object)\r\n      axios\r\n        .get(appConfig.baseApiUrl + \"customer/GetCustomerGroups\")\r\n        .then((resJson) => {\r\n          setCustomerGroups(resJson.data);\r\n          var obj = {};\r\n          resJson.data.map((item: ICustomerGroup) => {\r\n            return (obj[item.id] = item.groupName);\r\n          });\r\n          setGroups(obj);\r\n        });\r\n  }, [groups]);\r\n\r\n  useEffect(() => {\r\n    if (customers.length === 0) getCustomer();\r\n  }, [customers]);\r\n\r\n\r\n  const openCustomerForm = (customer) => {\r\n    // history.push(\"/customer\", { customer,customerGroups });\r\n    history.push({pathname:\"/customerForExchangeWithRate\",state:{ customer,customerGroups }})\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        title=\"Müşteri Listesi\"\r\n        columns={[\r\n          { \r\n            title: \"Ad Soyadı\", \r\n            field: \"customerName\" ,\r\n            render: rowData => <span onClick={() => openCustomerForm(rowData)}>{rowData.customerName}</span>\r\n          },\r\n          {\r\n            title: \"Müşteri Grubu\",\r\n            field: \"customerGroupId\",\r\n            lookup: groups,\r\n          },\r\n        ]}\r\n        data={customers}\r\n        actions={[\r\n          {\r\n            icon: \"edit\",\r\n            tooltip: \"Müşteri Güncelle\",\r\n            onClick: (event, rowData) => {\r\n              if ((rowData as ICustomer[]).length > 0)\r\n                openCustomerForm(rowData[0]);\r\n              else openCustomerForm(rowData);\r\n            },\r\n          },\r\n          {\r\n            icon: \"add\",\r\n            tooltip: \"Müşteri Ekle\",\r\n            isFreeAction: true,\r\n            onClick: (event) => openCustomerForm(\"\"),\r\n          },\r\n        ]}\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          exportButton: true,\r\n          exportCsv :  (columns, data) =>{\r\n            DownloadExcel(\"Müşteri Listesi\",columns,data);\r\n          },\r\n          pageSize:50,\r\n          pageSizeOptions:[50,100,200]\r\n        }}\r\n        localization={{\r\n          pagination: {\r\n            labelDisplayedRows: \"{from}-{to} of {count}\",\r\n          },\r\n          header: {\r\n            actions: \"İşlemler\",\r\n          },\r\n          body: {\r\n            emptyDataSourceMessage: \"No records to display\",\r\n            filterRow: {\r\n              filterTooltip: \"Filter\",\r\n            },\r\n          },\r\n          toolbar: {\r\n            // showColumnsTitle?: string;\r\n            // showColumnsAriaLabel?: string;\r\n            exportTitle: \"Dosyaya Aktar\",\r\n            // exportAriaLabel?: string;\r\n            exportName: \"Excel'e Aktar\",\r\n            searchTooltip: \"Ara\",\r\n            searchPlaceholder: \"Aranacak kelimeyi giriniz\",\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isLoading: state.loadingReducer,\r\n    totalRequest: state.totalRequestReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerListShort);\r\n","import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Typography, Divider, AppBar, Tabs, Tab, Box } from \"@material-ui/core\";\r\nimport CustomerAdd from \"./CustomerAdd\";\r\nimport { customerInitialState } from \"../../interfaces/ICustomer\";\r\nimport CustomerAccountList from \"./CustomerAccountList\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport axios from \"axios\";\r\nimport CustomerCurrencyExchange from \"./CustomerCurrencyExchange\";\r\nimport CustomerCurrencyExchangeSimulation from \"./CustomerCurrencyExchangeSimulation\";\r\nimport { connect } from \"react-redux\";\r\nimport CustomerCurrencyExchangeWithRate from \"./CustomerCurrencyExchangeWithRate\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <Typography\r\n      component=\"div\"\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box p={3}>{children}</Box>}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nfunction CustomerForExchangeWithRate(props) {\r\n  const [customer, setCustomer] = React.useState(customerInitialState);\r\n  const [customerAccounts, setAccounts] = React.useState([{}]);\r\n  const [groups, setGroups] = React.useState([{}]);\r\n  const [value, setValue] = React.useState(1);\r\n  \r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    if (props.location.state) {\r\n      if (props.location.state.customer !== \"\")\r\n        setCustomer(props.location.state.customer);\r\n      setGroups(props.location.state.customerGroups);\r\n    }\r\n  }, [props.location.state]);\r\n\r\n  useEffect(() => {\r\n    if (customer.id > 0) {\r\n      axios\r\n        .get(\r\n          appConfig.baseApiUrl +\r\n            \"customer/GetCustomerAccounts?customerId=\" +\r\n            customer.id\r\n        )\r\n        .then((resJson) => {\r\n          setAccounts(resJson.data);\r\n        });\r\n    }\r\n  }, [customer, props.actions]);\r\n\r\n  return (\r\n    <div>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          aria-label=\"simple tabs example\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n        >\r\n          <Tab label=\"Genel\" {...a11yProps(0)} />\r\n          <Tab\r\n            label=\"Kurlu Giriş Çıkış\"\r\n            {...a11yProps(1)}\r\n            disabled={customer.id === 0}\r\n          />\r\n          <Tab\r\n            label=\"Döviz Giriş/Çıkış/Transfer Talebi\"\r\n            {...a11yProps(2)}\r\n            disabled={customer.id === 0}\r\n          />\r\n\r\n        </Tabs>\r\n      </AppBar>\r\n      <Divider />\r\n\r\n      <TabPanel value={value} index={0}>\r\n        <CustomerAdd customer={customer} groups={groups}></CustomerAdd>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <CustomerCurrencyExchangeWithRate\r\n        customerAccounts={customerAccounts}\r\n        customer={customer}>\r\n        </CustomerCurrencyExchangeWithRate>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        <CustomerCurrencyExchangeSimulation\r\n          customerAccounts={customerAccounts}\r\n          customer={customer}\r\n        ></CustomerCurrencyExchangeSimulation>\r\n      </TabPanel>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    userContext: state.loginReducer,\r\n    isLoading: state.loadingReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {},\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerForExchangeWithRate);\r\n","import IConfiguration from \"../ioc/IConfiguration\";\r\nimport CustomerList from \"../pages/customer/CustomerList\";\r\nimport * as icons from \"@material-ui/icons\";\r\nimport DashBoard from \"../pages/dashboard/DashBoard\";\r\nimport Customer from \"../pages/customer/Customer\";\r\nimport Profile from \"../pages/profile/Profile\";\r\nimport CustomerAddNew from \"../pages/customer/CustomerAddNew\";\r\nimport DailyProfitAdd from \"../pages/dailyprofitadd/DailyProfitAdd\";\r\nimport EndOfMonthTransaction from \"../pages/endofmonthtransaction/EndOfMonthTransaction\";\r\nimport ShopProfitEntry from \"../pages/shopprofitentry/ShopProfitEntry\";\r\nimport CustomerTransactionReport from \"../pages/reports/CustomerTransactionReport\";\r\nimport GeneralTransactionReport from \"../pages/reports/GeneralTransactionReport\";\r\nimport TransactionRequestList from \"../pages/transactionrequest/TransactionRequestList\";\r\nimport Settings from \"../pages/settings/Settings\";\r\nimport CustomerGroup from \"../pages/customer/CustomerGroup\";\r\nimport SmsRequestList from \"../pages/reports/SmsRequestList\";\r\nimport UserList from \"../pages/users/UserList\";\r\nimport SmsExcelList from \"../pages/reports/SmsExcelList\";\r\nimport CustomerAddNewSummary from \"../pages/customer/CustomerAddNewSummary\";\r\nimport EmailSendingList from \"../pages/settings/EmailSendingList\";\r\nimport GroupSummaryReport from \"../pages/reports/GroupSummaryReport\";\r\nimport CustomerRequestList from \"../pages/customer/CustomerRequestList\";\r\nimport CustomerListShort from \"../pages/customer/CustomerListShort\";\r\nimport CustomerForExchangeWithRate from \"../pages/customer/CustomerForExchangeWithRate\";\r\nimport LastFiftyTransaction from \"../pages/reports/LastFiftyTransaction\";\r\n\r\nconst config = {\r\n  projectName: \"Çarşı Defter\",\r\n  baseApiUrl: \"https://api.carsidefter.xyz/\",\r\n  // baseApiUrl: \"https://localhost:44370/\",\r\n  screenList: [\r\n    {\r\n      link: \"home\",\r\n      component: DashBoard,\r\n      displayName: \"Anasayfa\",\r\n      icon: icons.Home,\r\n      isVisible: true,\r\n      onlyAdmin: false,\r\n    },\r\n    {\r\n      link: \"customerlist\",\r\n      component: CustomerList,\r\n      displayName: \"Müşteri Listesi\",\r\n      icon: icons.Hotel,\r\n      isVisible: true,\r\n      onlyAdmin: false,\r\n    },\r\n    {\r\n      link: \"customerListShort\",\r\n      component: CustomerListShort,\r\n      displayName: \"Müşteri Listesi Özet\",\r\n      icon: icons.Hotel,\r\n      isVisible: false,\r\n      onlyAdmin: false,\r\n    },\r\n    {\r\n      link: \"groupList\",\r\n      component: CustomerGroup,\r\n      displayName: \"Grup Tanımları\",\r\n      icon: icons.GroupAdd,\r\n      isVisible: true,\r\n      onlyAdmin: true,\r\n    },\r\n    {\r\n      link: \"customerRequestList\",\r\n      component: CustomerRequestList,\r\n      displayName: \"Onaya Gelen Müşteri İşlemleri\",\r\n      icon: icons.DoneAll,\r\n      isVisible: true,\r\n      onlyAdmin: true,\r\n    },\r\n    {\r\n      link: \"transactionrequestlist\",\r\n      component: TransactionRequestList,\r\n      displayName: \"Onaya Gelen İşlemler\",\r\n      icon: icons.DoneAll,\r\n      isVisible: true,\r\n      onlyAdmin: true,\r\n    },\r\n    {\r\n      link: \"customer\",\r\n      component: Customer,\r\n      displayName: \"Müşteri\",\r\n      icon: icons.Hotel,\r\n      isVisible: false,\r\n      onlyAdmin: false,\r\n    },\r\n    {\r\n      link: \"customerForExchangeWithRate\",\r\n      component: CustomerForExchangeWithRate,\r\n      displayName: \"Müşteri\",\r\n      icon: icons.Hotel,\r\n      isVisible: false,\r\n      onlyAdmin: false,\r\n    },\r\n    {\r\n      link: \"customeraddnew\",\r\n      component: CustomerAddNew,\r\n      displayName: \"Müşteri Ekle Yeni\",\r\n      icon: icons.Hotel,\r\n      isVisible: false,\r\n      onlyAdmin: false,\r\n    },\r\n    {\r\n      link: \"dailyprofitadd\",\r\n      component: DailyProfitAdd,\r\n      displayName: \"Günlük Kar Girişi\",\r\n      icon: icons.AttachMoney,\r\n      isVisible: true,\r\n      onlyAdmin: true,\r\n    },\r\n    {\r\n      link: \"billingprocess\",\r\n      component: EndOfMonthTransaction,\r\n      displayName: \"Hesap Kesim İşlemi\",\r\n      icon: icons.CalendarToday,\r\n      isVisible: true,\r\n      onlyAdmin: true,\r\n    },\r\n    {\r\n      link: \"shopprofitentry\",\r\n      component: ShopProfitEntry,\r\n      displayName: \"Dükkan Kar Girişi\",\r\n      icon: icons.Money,\r\n      isVisible: true,\r\n      onlyAdmin: true,\r\n    },\r\n    {\r\n      link: \"customertransactionreport\",\r\n      component: CustomerTransactionReport,\r\n      displayName: \"Müşteri İşlem Raporu\",\r\n      icon: icons.Report,\r\n      isVisible: true,\r\n      onlyAdmin: false,\r\n      hasBalance : true,\r\n    },\r\n    {\r\n      link: \"groupSummaryReport\",\r\n      component: GroupSummaryReport,\r\n      displayName: \"Group Özet Raporu\",\r\n      icon: icons.GroupWork,\r\n      isVisible: true,\r\n      onlyAdmin: true,\r\n    },\r\n    {\r\n      link: \"generaltransactionreport\",\r\n      component: GeneralTransactionReport,\r\n      displayName: \"Genel İşlem Raporu\",\r\n      icon: icons.Today,\r\n      isVisible: true,\r\n      onlyAdmin: false,\r\n      hasBalance : true,\r\n    },\r\n    {\r\n      link: \"lastFiftyTransaction\",\r\n      component: LastFiftyTransaction,\r\n      displayName: \"Son 50 İşlem\",\r\n      icon: icons.Today,\r\n      isVisible: false,\r\n      onlyAdmin: false,\r\n    },\r\n    {\r\n      link: \"smsExcelList\",\r\n      component: SmsExcelList,\r\n      displayName: \"Ay Sonu Sms Raporu\",\r\n      icon: icons.Today,\r\n      isVisible: true,\r\n      onlyAdmin: true,\r\n    },\r\n    {\r\n      link: \"settings\",\r\n      component: Settings,\r\n      displayName: \"Ayarlar\",\r\n      icon: icons.Settings,\r\n      isVisible: true,\r\n      onlyAdmin: true,\r\n    },\r\n    {\r\n      link: \"userList\",\r\n      component: UserList,\r\n      displayName: \"Kullanıcı Listesi\",\r\n      icon: icons.VerifiedUser,\r\n      isVisible: true,\r\n      onlyAdmin: true,\r\n    },\r\n    {\r\n      link: \"profile\",\r\n      component: Profile,\r\n      dislpayName: \"Profil\",\r\n      isVisible: false,\r\n      onlyAdmin: false,\r\n    },\r\n    {\r\n      link: \"emailSendingList\",\r\n      component: EmailSendingList,\r\n      dislpayName: \"Email Listesi\",\r\n      isVisible: false,\r\n      onlyAdmin: false,\r\n    },\r\n    \r\n    {\r\n      link: \"customerAddNewSummary\",\r\n      component: CustomerAddNewSummary,\r\n      dislpayName: \"Müşteri Ekle Kısa\",\r\n      isVisible: false,\r\n      onlyAdmin: false,\r\n    },\r\n    \r\n  ],\r\n  topBarRightButtons: [{ link: \"profile\", displayName: \"Profil\" }],\r\n} as IConfiguration;\r\n\r\nexport default config;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  FormGroup,\r\n  TextField,\r\n  Checkbox,\r\n  Button,\r\n  FormControlLabel,\r\n} from \"@material-ui/core\";\r\nimport { Formik } from \"formik\";\r\nimport MaterialTable from \"material-table\";\r\nimport alertify from \"alertifyjs\";\r\nimport axios from \"axios\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport { DownloadExcel } from \"../../services/ExcelService\";\r\n\r\nexport default function CustomerGroup() {\r\n  const [groups, setGroups] = useState([]);\r\n  const initialGroup = {\r\n    id: 0,\r\n    groupName: \"\",\r\n    isActive: true,\r\n  };\r\n  const [selectedGroup, setSelectedGroup] = useState(initialGroup);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(appConfig.baseApiUrl + \"customer/GetCustomerAllGroups\")\r\n      .then((resJson) => {\r\n        setGroups(resJson.data);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid item md={3} xs={12}>\r\n        <Formik\r\n          initialValues={{\r\n            id: selectedGroup.id,\r\n            groupName: selectedGroup.groupName,\r\n            isActive: selectedGroup.isActive,\r\n          }}\r\n          validateOnChange={false}\r\n          enableReinitialize\r\n          validate={(values) => {\r\n            const errors = {} as any;\r\n            if (values.groupName === \"\") {\r\n              errors.groupName = \"Required\";\r\n              alertify.error(\"Alanları Kontrol Ediniz!\");\r\n            }\r\n\r\n            return errors;\r\n          }}\r\n          onSubmit={(values, actions) => {\r\n            axios\r\n              .post(appConfig.baseApiUrl + \"customer/SaveCustomerGroup\", values)\r\n              .then((resJson) => {\r\n                setGroups(resJson.data);\r\n                setSelectedGroup(initialGroup);\r\n                alertify.success(\"İşlem Başarılı!\");\r\n              });\r\n          }}\r\n        >\r\n          {(formProps) => (\r\n            <form onSubmit={formProps.handleSubmit} style={{ maxWidth: 250 }}>\r\n              <FormGroup>\r\n                <TextField\r\n                  name=\"groupName\"\r\n                  label=\"Grup Adı\"\r\n                  value={formProps.values.groupName}\r\n                  onChange={formProps.handleChange}\r\n                  onBlur={formProps.handleBlur}\r\n                  InputLabelProps={{ shrink: true }}\r\n                />\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"isActive\"\r\n                      value={formProps.values.isActive}\r\n                      checked={formProps.values.isActive}\r\n                      onChange={formProps.handleChange}\r\n                    />\r\n                  }\r\n                  label=\"Aktif mi ?\"\r\n                />\r\n                <Button color=\"primary\" type=\"submit\">\r\n                  Kaydet\r\n                </Button>\r\n              </FormGroup>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </Grid>\r\n      <Grid item md={9} xs={12}>\r\n        <MaterialTable\r\n          title=\"Grup Listesi\"\r\n          columns={[\r\n            { title: \"Id\", field: \"id\" },\r\n            { title: \"Grup Adı\", field: \"groupName\" },\r\n            { title: \"Aktif mi?\", field: \"isActive\" },\r\n          ]}\r\n          data={groups}\r\n          actions={[\r\n            {\r\n              icon: \"edit\",\r\n              tooltip: \"Grup Güncelle\",\r\n              onClick: (event, rowData) => {\r\n                setSelectedGroup(rowData as any);\r\n              },\r\n            },\r\n            {\r\n              icon: \"add\",\r\n              tooltip: \"Grup Ekle\",\r\n              isFreeAction: true,\r\n              onClick: (event) => setSelectedGroup(initialGroup),\r\n            },\r\n          ]}\r\n          options={{\r\n            actionsColumnIndex: -1,\r\n            exportButton: true,\r\n            exportCsv: (columns, data) => {\r\n              DownloadExcel(\"Grup Listesi\", columns, data);\r\n            },\r\n            pageSize: 50,\r\n            pageSizeOptions: [50, 100, 200],\r\n          }}\r\n          localization={{\r\n            pagination: {\r\n              labelDisplayedRows: \"{from}-{to} of {count}\",\r\n            },\r\n            header: {\r\n              actions: \"İşlemler\",\r\n            },\r\n            body: {\r\n              emptyDataSourceMessage: \"No records to display\",\r\n              filterRow: {\r\n                filterTooltip: \"Filter\",\r\n              },\r\n            },\r\n            toolbar: {\r\n              // showColumnsTitle?: string;\r\n              // showColumnsAriaLabel?: string;\r\n              exportTitle: \"Dosyaya Aktar\",\r\n              // exportAriaLabel?: string;\r\n              exportName: \"Excel'e Aktar\",\r\n              searchTooltip: \"Ara\",\r\n              searchPlaceholder: \"Aranacak kelimeyi giriniz\",\r\n            },\r\n          }}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  FormGroup,\r\n  TextField,\r\n  Button,\r\n  ExpansionPanel,\r\n  ExpansionPanelSummary,\r\n  ExpansionPanelDetails,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { customerInitialState } from \"../../interfaces/ICustomer\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport axios from \"axios\";\r\nimport alertify from \"alertifyjs\";\r\nimport { Formik, Field } from \"formik\";\r\nimport MaterialTable from \"material-table\";\r\nimport { DownloadExcel } from \"../../services/ExcelService\";\r\n\r\nexport default function CustomerTransactionReport() {\r\n  const [customers, setCustomers] = useState([customerInitialState]);\r\n  const [transactions, setTransactions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(appConfig.baseApiUrl + \"customer/GetAllCustomers\")\r\n      .then((resJson) => {\r\n        setCustomers(resJson.data);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={2}>\r\n        <Grid item lg={3} md={12} xs={12}>\r\n          <ExpansionPanel square defaultExpanded={true}>\r\n            <ExpansionPanelSummary\r\n              expandIcon={<ExpandMoreIcon />}\r\n              aria-controls=\"panel1a-content\"\r\n              id=\"panel1a-header\"\r\n            >\r\n              <Typography>Filtreler</Typography>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n              }}\r\n            >\r\n              <Formik\r\n                initialValues={{\r\n                  startDate: new Date(),\r\n                  endDate: new Date(),\r\n                  customer: customers[0],\r\n                }}\r\n                validateOnChange={false}\r\n                validate={(values) => {\r\n                  const errors = {} as any;\r\n                  if (values.customer.id < 1) {\r\n                    errors.customer = \"Müşteri seçimi yapılmalıdır.\";\r\n                  }\r\n                  return errors;\r\n                }}\r\n                onSubmit={(values, actions) => {\r\n                  actions.setValues(values);\r\n                  axios\r\n                    .post(\r\n                      appConfig.baseApiUrl +\r\n                        \"report/GetCustomerTransactionHistory\",\r\n                      values\r\n                    )\r\n                    .then((resJson) => {\r\n                      setTransactions(resJson.data);\r\n                      alertify.success(\"Liste Güncellendi!\");\r\n                    });\r\n                }}\r\n              >\r\n                {(formProps) => (\r\n                  <form onSubmit={formProps.handleSubmit}>\r\n                    <FormGroup>\r\n                      <Field name={\"startDate\"} id={\"startDate\"}>\r\n                        {({ field: { value }, form: { setFieldValue } }) => (\r\n                          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <KeyboardDatePicker\r\n                              margin=\"normal\"\r\n                              id=\"date-picker-dialog\"\r\n                              name=\"startDate\"\r\n                              label=\"İşlem Tarihi\"\r\n                              format=\"dd/MM/yyyy\"\r\n                              value={value}\r\n                              onChange={(val) => {\r\n                                setFieldValue(\"startDate\", val);\r\n                              }}\r\n                              okLabel=\"Seç\"\r\n                              cancelLabel=\"İptal\"\r\n                              KeyboardButtonProps={{\r\n                                \"aria-label\": \"change date\",\r\n                              }}\r\n                            />\r\n                          </MuiPickersUtilsProvider>\r\n                        )}\r\n                      </Field>\r\n                      <Field name={\"endDate\"} id={\"endDate\"}>\r\n                        {({ field: { value }, form: { setFieldValue } }) => (\r\n                          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <KeyboardDatePicker\r\n                              margin=\"normal\"\r\n                              id=\"date-picker-dialog\"\r\n                              name=\"endDate\"\r\n                              label=\"İşlem Tarihi\"\r\n                              format=\"dd/MM/yyyy\"\r\n                              value={value}\r\n                              onChange={(val) => {\r\n                                setFieldValue(\"endDate\", val);\r\n                              }}\r\n                              okLabel=\"Seç\"\r\n                              cancelLabel=\"İptal\"\r\n                              KeyboardButtonProps={{\r\n                                \"aria-label\": \"change date\",\r\n                              }}\r\n                            />\r\n                          </MuiPickersUtilsProvider>\r\n                        )}\r\n                      </Field>\r\n                      <Field name={\"customer\"} id={\"customer\"}>\r\n                        {({ field: { value }, form: { setFieldValue } }) => (\r\n                          <Autocomplete\r\n                            id=\"customer\"\r\n                            options={customers}\r\n                            getOptionLabel={(option) => option.customerName}\r\n                            // defaultValue={customers[0]}\r\n                            onChange={(event, value, target) => {\r\n                              setFieldValue(\"customer\", value);\r\n                            }}\r\n                            value={value}\r\n                            renderInput={(params) => (\r\n                              <TextField\r\n                                {...params}\r\n                                variant=\"standard\"\r\n                                label=\"Müşteri\"\r\n                                placeholder=\"Seçili Müşteri\"\r\n                              />\r\n                            )}\r\n                          />\r\n                        )}\r\n                      </Field>\r\n                      {formProps.errors.customer &&\r\n                      formProps.touched.customer ? (\r\n                        <div style={{ color: \"red\" }}>\r\n                          {formProps.errors.customer}\r\n                        </div>\r\n                      ) : null}\r\n                      <Button color=\"primary\" type=\"submit\">\r\n                        Göster\r\n                      </Button>\r\n                    </FormGroup>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel>\r\n        </Grid>\r\n        <Grid item lg={9} md={12} xs={12}>\r\n          <MaterialTable\r\n            title=\"Genel İşlem Listesi\"\r\n            columns={[\r\n              { title: \"Id\", field: \"transactionId\" },\r\n              { title: \"İşlem Tipi\", field: \"transactionType\" },\r\n              { title: \"Tutar\", field: \"transactionAmount\" },\r\n              { title: \"Tarih\", field: \"transactionDate\", type: \"date\" },\r\n              { title: \"Alış\", field: \"buyingRate\" },\r\n              { title: \"Satış\", field: \"sellingRate\" },\r\n              { title: \"Hesap\", field: \"accountNo\", defaultGroupOrder: 0 },\r\n              { title: \"Döviz\", field: \"currencyCode\" },\r\n              { title: \"Hesap Bakiye\", field: \"accountBalance\" },\r\n              { title: \"Açıklama\", field: \"transactionDescription\" },\r\n              {\r\n                title: \"İşlemden Önceki Bakiye\",\r\n                field: \"balanceBeforeTransaction\",\r\n              },\r\n              { title: \"İlk Bakiye\", field: \"firstBalance\" },\r\n              { title: \"Son Bakiye\", field: \"lastBalance\" },\r\n            ]}\r\n            data={transactions}\r\n            options={{\r\n              grouping: true,\r\n              actionsColumnIndex: -1,\r\n              exportButton: true,\r\n              exportCsv: (columns, data) => {\r\n                DownloadExcel(\"Müşteri Listesi\", columns, data);\r\n              },\r\n              pageSize: 10,\r\n              pageSizeOptions: [10, 50, 100],\r\n            }}\r\n            localization={{\r\n              pagination: {\r\n                labelDisplayedRows: \"{from}-{to} of {count}\",\r\n              },\r\n              header: {\r\n                actions: \"İşlemler\",\r\n              },\r\n              body: {\r\n                emptyDataSourceMessage: \"No records to display\",\r\n                filterRow: {\r\n                  filterTooltip: \"Filter\",\r\n                },\r\n              },\r\n              toolbar: {\r\n                // showColumnsTitle?: string;\r\n                // showColumnsAriaLabel?: string;\r\n                exportTitle: \"Dosyaya Aktar\",\r\n                // exportAriaLabel?: string;\r\n                exportName: \"Excel'e Aktar\",\r\n                searchTooltip: \"Ara\",\r\n                searchPlaceholder: \"Aranacak kelimeyi giriniz\",\r\n              },\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  FormGroup,\r\n  TextField,\r\n  Button,\r\n  ExpansionPanel,\r\n  ExpansionPanelSummary,\r\n  ExpansionPanelDetails,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { customerInitialState } from \"../../interfaces/ICustomer\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport axios from \"axios\";\r\nimport alertify from \"alertifyjs\";\r\nimport { Formik, Field } from \"formik\";\r\nimport MaterialTable from \"material-table\";\r\nimport { DownloadExcel } from \"../../services/ExcelService\";\r\n\r\nexport default function GroupSummaryReport() {\r\n  const [customers, setCustomers] = useState([customerInitialState]);\r\n  const [transactions, setTransactions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(appConfig.baseApiUrl + \"customer/GetAllCustomers\")\r\n      .then((resJson) => {\r\n        setCustomers(resJson.data);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={2}>\r\n        <Grid item lg={3} md={12} xs={12}>\r\n          <ExpansionPanel square defaultExpanded={true}>\r\n            <ExpansionPanelSummary\r\n              expandIcon={<ExpandMoreIcon />}\r\n              aria-controls=\"panel1a-content\"\r\n              id=\"panel1a-header\"\r\n            >\r\n              <Typography>Filtreler</Typography>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n              }}\r\n            >\r\n              <Formik\r\n                initialValues={{\r\n                  startDate: new Date(),\r\n                  endDate: new Date(),\r\n                }}\r\n                validateOnChange={false}\r\n                // validate={(values) => {\r\n                //   const errors = {} as any;\r\n                //   if (values.startDate < 1) {\r\n                //     errors.customer = \"Müşteri seçimi yapılmalıdır.\";\r\n                //   }\r\n                //   return errors;\r\n                // }}\r\n                onSubmit={(values, actions) => {\r\n                  actions.setValues(values);\r\n                  axios\r\n                    .post(\r\n                      appConfig.baseApiUrl +\r\n                        \"report/GetGroupSummaryReport\",\r\n                      values\r\n                    )\r\n                    .then((resJson) => {\r\n                      setTransactions(resJson.data);\r\n                      alertify.success(\"Liste Güncellendi!\");\r\n                    });\r\n                }}\r\n              >\r\n                {(formProps) => (\r\n                  <form onSubmit={formProps.handleSubmit}>\r\n                    <FormGroup>\r\n                      <Field name={\"startDate\"} id={\"startDate\"}>\r\n                        {({ field: { value }, form: { setFieldValue } }) => (\r\n                          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <KeyboardDatePicker\r\n                              margin=\"normal\"\r\n                              id=\"date-picker-dialog\"\r\n                              name=\"startDate\"\r\n                              label=\"İşlem Tarihi\"\r\n                              format=\"dd/MM/yyyy\"\r\n                              value={value}\r\n                              onChange={(val) => {\r\n                                setFieldValue(\"startDate\", val);\r\n                              }}\r\n                              okLabel=\"Seç\"\r\n                              cancelLabel=\"İptal\"\r\n                              KeyboardButtonProps={{\r\n                                \"aria-label\": \"change date\",\r\n                              }}\r\n                            />\r\n                          </MuiPickersUtilsProvider>\r\n                        )}\r\n                      </Field>\r\n                      <Field name={\"endDate\"} id={\"endDate\"}>\r\n                        {({ field: { value }, form: { setFieldValue } }) => (\r\n                          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <KeyboardDatePicker\r\n                              margin=\"normal\"\r\n                              id=\"date-picker-dialog\"\r\n                              name=\"endDate\"\r\n                              label=\"İşlem Tarihi\"\r\n                              format=\"dd/MM/yyyy\"\r\n                              value={value}\r\n                              onChange={(val) => {\r\n                                setFieldValue(\"endDate\", val);\r\n                              }}\r\n                              okLabel=\"Seç\"\r\n                              cancelLabel=\"İptal\"\r\n                              KeyboardButtonProps={{\r\n                                \"aria-label\": \"change date\",\r\n                              }}\r\n                            />\r\n                          </MuiPickersUtilsProvider>\r\n                        )}\r\n                      </Field>                      \r\n                      <Button color=\"primary\" type=\"submit\">\r\n                        Göster\r\n                      </Button>\r\n                    </FormGroup>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel>\r\n        </Grid>\r\n        <Grid item lg={9} md={12} xs={12}>\r\n          <MaterialTable\r\n            title=\"Genel İşlem Listesi\"\r\n            columns={[\r\n              { title: \"Grup Adı\", field: \"groupName\",defaultGroupOrder: 0 },\r\n              { title: \"Döviz\", field: \"currencyCode\" },\r\n              { title: \"Toplam Kar\", field: \"totalProfit\" },\r\n              { title: \"Toplam Bakiye\", field: \"totalBalance\",},\r\n              { title: \"Havuz Karı\", field: \"poolProfit\" },\r\n            ]}\r\n            data={transactions}\r\n            options={{\r\n              grouping: true,\r\n              actionsColumnIndex: -1,\r\n              exportButton: true,\r\n              exportCsv: (columns, data) => {\r\n                DownloadExcel(\"Grup Özet Raporu\", columns, data);\r\n              },\r\n              pageSize: 10,\r\n              pageSizeOptions: [10, 50, 100],\r\n            }}\r\n            localization={{\r\n              pagination: {\r\n                labelDisplayedRows: \"{from}-{to} of {count}\",\r\n              },\r\n              header: {\r\n                actions: \"İşlemler\",\r\n              },\r\n              body: {\r\n                emptyDataSourceMessage: \"No records to display\",\r\n                filterRow: {\r\n                  filterTooltip: \"Filter\",\r\n                },\r\n              },\r\n              toolbar: {\r\n                // showColumnsTitle?: string;\r\n                // showColumnsAriaLabel?: string;\r\n                exportTitle: \"Dosyaya Aktar\",\r\n                // exportAriaLabel?: string;\r\n                exportName: \"Excel'e Aktar\",\r\n                searchTooltip: \"Ara\",\r\n                searchPlaceholder: \"Aranacak kelimeyi giriniz\",\r\n              },\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  FormGroup,\r\n  Button,\r\n  ExpansionPanel,\r\n  ExpansionPanelSummary,\r\n  ExpansionPanelDetails,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport { customerInitialState } from \"../../interfaces/ICustomer\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport axios from \"axios\";\r\nimport alertify from \"alertifyjs\";\r\nimport { Formik, Field } from \"formik\";\r\nimport MaterialTable from \"material-table\";\r\nimport { DownloadExcel } from \"../../services/ExcelService\";\r\n\r\nexport default function GeneralTransactionReport() {\r\n  const [transactions, setTransactions] = useState([]);\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={2}>\r\n        <Grid item md={12} xs={12}>\r\n          <ExpansionPanel square defaultExpanded={true}>\r\n            <ExpansionPanelSummary\r\n              expandIcon={<ExpandMoreIcon />}\r\n              aria-controls=\"panel1a-content\"\r\n              id=\"panel1a-header\"\r\n            >\r\n              <Typography>Filtreler</Typography>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n              }}\r\n            >\r\n              <Formik\r\n                initialValues={{\r\n                  startDate: new Date(),\r\n                  endDate: new Date(),\r\n                  customer: customerInitialState,\r\n                }}\r\n                validateOnChange={false}\r\n                validate={(values) => {\r\n                  const errors = {} as any;\r\n\r\n                  return errors;\r\n                }}\r\n                onSubmit={(values, actions) => {\r\n                  actions.setValues(values);\r\n                  axios\r\n                    .post(\r\n                      appConfig.baseApiUrl +\r\n                        \"report/GetGeneralTransactionHistory\",\r\n                      values\r\n                    )\r\n                    .then((resJson) => {\r\n                      setTransactions(resJson.data);\r\n                      alertify.success(\"Liste Güncellendi!\");\r\n                    });\r\n                }}\r\n              >\r\n                {(formProps) => (\r\n                  <form onSubmit={formProps.handleSubmit}>\r\n                    <FormGroup>\r\n                      <Field name={\"startDate\"} id={\"startDate\"}>\r\n                        {({ field: { value }, form: { setFieldValue } }) => (\r\n                          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <KeyboardDatePicker\r\n                              margin=\"normal\"\r\n                              id=\"date-picker-dialog\"\r\n                              name=\"startDate\"\r\n                              label=\"İşlem Tarihi\"\r\n                              format=\"dd/MM/yyyy\"\r\n                              value={value}\r\n                              onChange={(val) => {\r\n                                setFieldValue(\"startDate\", val);\r\n                              }}\r\n                              okLabel=\"Seç\"\r\n                              cancelLabel=\"İptal\"\r\n                              KeyboardButtonProps={{\r\n                                \"aria-label\": \"change date\",\r\n                              }}\r\n                            />\r\n                          </MuiPickersUtilsProvider>\r\n                        )}\r\n                      </Field>\r\n                      <Field name={\"endDate\"} id={\"endDate\"}>\r\n                        {({ field: { value }, form: { setFieldValue } }) => (\r\n                          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <KeyboardDatePicker\r\n                              margin=\"normal\"\r\n                              id=\"date-picker-dialog\"\r\n                              name=\"endDate\"\r\n                              label=\"İşlem Tarihi\"\r\n                              format=\"dd/MM/yyyy\"\r\n                              value={value}\r\n                              onChange={(val) => {\r\n                                setFieldValue(\"endDate\", val);\r\n                              }}\r\n                              okLabel=\"Seç\"\r\n                              cancelLabel=\"İptal\"\r\n                              KeyboardButtonProps={{\r\n                                \"aria-label\": \"change date\",\r\n                              }}\r\n                            />\r\n                          </MuiPickersUtilsProvider>\r\n                        )}\r\n                      </Field>\r\n                      <Button color=\"primary\" type=\"submit\">\r\n                        Göster\r\n                      </Button>\r\n                    </FormGroup>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel>\r\n        </Grid>\r\n        <Grid item md={12} xs={12}>\r\n          <MaterialTable\r\n            title=\"Genel İşlem Listesi\"\r\n            columns={[\r\n              { title: \"Id\", field: \"transactionId\" },\r\n              { title: \"İşlem Tipi\", field: \"transactionType\" },\r\n              { title: \"Tutar\", field: \"transactionAmount\" },\r\n              { title: \"Tarih\", field: \"transactionDate\",type:\"date\"},\r\n              { title: \"Oluşturma Tarihi\", field: \"creationDate\",type:\"datetime\" , defaultSort:\"asc\"},\r\n              { title: \"Alış\", field: \"buyingRate\" },\r\n              { title: \"Satış\", field: \"sellingRate\" },\r\n              { title: \"Müşteri\", field: \"customerName\" },\r\n              { title: \"Hesap\", field: \"accountNo\" },\r\n              { title: \"Döviz\", field: \"currencyCode\" },\r\n              { title: \"Hesap Bakiye\", field: \"accountBalance\" },\r\n              {\r\n                title: \"İşlemden Önceki Bakiye\",\r\n                field: \"balanceBeforeTransaction\",\r\n              },\r\n              { title: \"İlk Bakiye\", field: \"firstBalance\" },\r\n              { title: \"Son Bakiye\", field: \"lastBalance\" },\r\n            ]}\r\n            data={transactions}\r\n            options={{\r\n              grouping: true,\r\n              actionsColumnIndex: -1,\r\n              exportButton: true,\r\n              exportCsv: (columns, data) => {\r\n                DownloadExcel(\"Müşteri Listesi\", columns, data);\r\n              },\r\n              pageSize: 50,\r\n              pageSizeOptions: [50, 100, 200],\r\n            }}\r\n            localization={{\r\n              pagination: {\r\n                labelDisplayedRows: \"{from}-{to} of {count}\",\r\n              },\r\n              header: {\r\n                actions: \"İşlemler\",\r\n              },\r\n              body: {\r\n                emptyDataSourceMessage: \"No records to display\",\r\n                filterRow: {\r\n                  filterTooltip: \"Filter\",\r\n                },\r\n              },\r\n              toolbar: {\r\n                // showColumnsTitle?: string;\r\n                // showColumnsAriaLabel?: string;\r\n                exportTitle: \"Dosyaya Aktar\",\r\n                // exportAriaLabel?: string;\r\n                exportName: \"Excel'e Aktar\",\r\n                searchTooltip: \"Ara\",\r\n                searchPlaceholder: \"Aranacak kelimeyi giriniz\",\r\n              },\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n} from \"@material-ui/core\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport { customerInitialState } from \"../../interfaces/ICustomer\";\r\nimport axios from \"axios\";\r\nimport MaterialTable from \"material-table\";\r\nimport { DownloadExcel } from \"../../services/ExcelService\";\r\n\r\nexport default function GroupSummaryReport() {\r\n  const [customers, setCustomers] = useState([customerInitialState]);\r\n  const [transactions, setTransactions] = useState([] as any[]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(appConfig.baseApiUrl + \"report/GetLastFiftyTransaction\")\r\n      .then((resJson) => {\r\n        setTransactions(resJson.data);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={2}>\r\n        <Grid item lg={12} md={12} xs={12}>\r\n          <MaterialTable\r\n            title=\"Genel İşlem Listesi\"\r\n            columns={[\r\n              { title: \"Tarih\", field: \"dateStr\",\r\n              render: rowData=> <span style={{width: 150}}> {rowData.dateStr}</span> },\r\n              { title: \"Açıklama\", field: \"description\" },\r\n            ]}\r\n            data={transactions}\r\n            options={{\r\n              actionsColumnIndex: -1,\r\n              exportButton: true,\r\n              exportCsv: (columns, data) => {\r\n                DownloadExcel(\"Son 50 İşlem\", columns, data);\r\n              },\r\n              pageSize: 50,\r\n              pageSizeOptions: [10, 50, 100],\r\n            }}\r\n            localization={{\r\n              pagination: {\r\n                labelDisplayedRows: \"{from}-{to} of {count}\",\r\n              },\r\n              header: {\r\n                actions: \"İşlemler\",\r\n              },\r\n              body: {\r\n                emptyDataSourceMessage: \"No records to display\",\r\n                filterRow: {\r\n                  filterTooltip: \"Filter\",\r\n                },\r\n              },\r\n              toolbar: {\r\n                // showColumnsTitle?: string;\r\n                // showColumnsAriaLabel?: string;\r\n                exportTitle: \"Dosyaya Aktar\",\r\n                // exportAriaLabel?: string;\r\n                exportName: \"Excel'e Aktar\",\r\n                searchTooltip: \"Ara\",\r\n                searchPlaceholder: \"Aranacak kelimeyi giriniz\",\r\n              },\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  FormGroup,\r\n  Button,\r\n  ExpansionPanel,\r\n  ExpansionPanelSummary,\r\n  ExpansionPanelDetails,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport { customerInitialState } from \"../../interfaces/ICustomer\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport axios from \"axios\";\r\nimport alertify from \"alertifyjs\";\r\nimport { Formik, Field } from \"formik\";\r\nimport { saveAs } from \"file-saver\";\r\nimport XLSX from \"xlsx\";\r\nimport {\r\n  strToArrBuffer,\r\n} from \"../../utils/DataUtils\"\r\n\r\nexport default function SmsExcelList() {\r\n  const [transactions, setTransactions] = useState([]);\r\n\r\n  return (\r\n    <div>\r\n      <Grid container spacing={2}>\r\n        <Grid item md={12} xs={12}>\r\n          <ExpansionPanel square defaultExpanded={true}>\r\n            <ExpansionPanelSummary\r\n              expandIcon={<ExpandMoreIcon />}\r\n              aria-controls=\"panel1a-content\"\r\n              id=\"panel1a-header\"\r\n            >\r\n              <Typography>Filtreler</Typography>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n              }}\r\n            >\r\n              <Formik\r\n                initialValues={{\r\n                  startDate: new Date(),\r\n                  endDate: new Date(),\r\n                  customer: customerInitialState,\r\n                }}\r\n                validateOnChange={false}\r\n                validate={(values) => {\r\n                  const errors = {} as any;\r\n\r\n                  return errors;\r\n                }}\r\n                onSubmit={(values, actions) => {\r\n                  actions.setValues(values);\r\n                  axios\r\n                    .post(\r\n                      appConfig.baseApiUrl +\r\n                        \"excell/GenerateEndOfMonthExcel\",\r\n                      values\r\n                    )\r\n                    .then((resJson) => {\r\n                      var fileName = \"SmsList_\" + new Date().getTime().toString() + \".xlsx\"\r\n                      var binary_string = window.atob(resJson.data);\r\n                      var len = binary_string.length;\r\n                      var bytes = new Uint8Array(len);\r\n                      for (var i = 0; i < len; i++) {\r\n                          bytes[i] = binary_string.charCodeAt(i);\r\n                      }\r\n                      console.log(bytes);\r\n                      saveAs(\r\n                        new Blob([bytes], {\r\n                          type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n                        }),\r\n                        fileName\r\n                      );\r\n                      // setTransactions(resJson.data);\r\n                      alertify.success(\"Liste Güncellendi!\");\r\n                    });\r\n                }}\r\n              >\r\n                {(formProps) => (\r\n                  <form onSubmit={formProps.handleSubmit}>\r\n                    <FormGroup>\r\n                      <Field name={\"startDate\"} id={\"startDate\"}>\r\n                        {({ field: { value }, form: { setFieldValue } }) => (\r\n                          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <KeyboardDatePicker\r\n                              margin=\"normal\"\r\n                              id=\"date-picker-dialog\"\r\n                              name=\"startDate\"\r\n                              label=\"İşlem Tarihi\"\r\n                              format=\"dd/MM/yyyy\"\r\n                              value={value}\r\n                              onChange={(val) => {\r\n                                setFieldValue(\"startDate\", val);\r\n                              }}\r\n                              okLabel=\"Seç\"\r\n                              cancelLabel=\"İptal\"\r\n                              KeyboardButtonProps={{\r\n                                \"aria-label\": \"change date\",\r\n                              }}\r\n                            />\r\n                          </MuiPickersUtilsProvider>\r\n                        )}\r\n                      </Field>\r\n                      <Field name={\"endDate\"} id={\"endDate\"}>\r\n                        {({ field: { value }, form: { setFieldValue } }) => (\r\n                          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <KeyboardDatePicker\r\n                              margin=\"normal\"\r\n                              id=\"date-picker-dialog\"\r\n                              name=\"endDate\"\r\n                              label=\"İşlem Tarihi\"\r\n                              format=\"dd/MM/yyyy\"\r\n                              value={value}\r\n                              onChange={(val) => {\r\n                                setFieldValue(\"endDate\", val);\r\n                              }}\r\n                              okLabel=\"Seç\"\r\n                              cancelLabel=\"İptal\"\r\n                              KeyboardButtonProps={{\r\n                                \"aria-label\": \"change date\",\r\n                              }}\r\n                            />\r\n                          </MuiPickersUtilsProvider>\r\n                        )}\r\n                      </Field>\r\n                      <Button color=\"primary\" type=\"submit\">\r\n                        Göster\r\n                      </Button>\r\n                    </FormGroup>\r\n                  </form>\r\n                )}\r\n              </Formik>\r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  FormGroup,\r\n  TextField,\r\n  Checkbox,\r\n  Button,\r\n  FormControlLabel,\r\n} from \"@material-ui/core\";\r\nimport { Formik } from \"formik\";\r\nimport MaterialTable from \"material-table\";\r\nimport alertify from \"alertifyjs\";\r\nimport axios from \"axios\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport { DownloadExcel } from \"../../services/ExcelService\";\r\n\r\nexport default function UserList() {\r\n  const [users, setusers] = useState([]);\r\n  const initialUser = {\r\n    id: 0,\r\n    nameSurname: \"\",\r\n    username: \"\",\r\n    isActive: true,\r\n    isAdmin: false,\r\n    cantSeeBalance:false,\r\n    password: \"\",\r\n  };\r\n  const [selectedUser, setselectedUser] = useState(initialUser);\r\n\r\n  useEffect(() => {\r\n    axios.get(appConfig.baseApiUrl + \"users/GetAll\").then((resJson) => {\r\n      setusers(resJson.data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid item md={3} xs={12}>\r\n        <Formik\r\n          initialValues={{\r\n            id: selectedUser.id,\r\n            nameSurname: selectedUser.nameSurname,\r\n            username: selectedUser.username,\r\n            isActive: selectedUser.isActive,\r\n            isAdmin: selectedUser.isAdmin,\r\n            password: selectedUser.password,\r\n            cantSeeBalance:selectedUser.cantSeeBalance,\r\n          }}\r\n          validateOnChange={false}\r\n          enableReinitialize\r\n          validate={(values) => {\r\n            const errors = {} as any;\r\n            // if (values.groupName === \"\") {\r\n            //   errors.groupName = \"Required\";\r\n            //   alertify.error(\"Alanları Kontrol Ediniz!\");\r\n            // }\r\n\r\n            return errors;\r\n          }}\r\n          onSubmit={(values, actions) => {\r\n            axios\r\n              .post(appConfig.baseApiUrl + \"users/SaveUser\", values)\r\n              .then((resJson) => {\r\n                if (resJson.data.responseCode === 200) {\r\n                  setusers(resJson.data.responseData);\r\n                  setselectedUser(initialUser);\r\n                  alertify.success(\"İşlem Başarılı!\");\r\n                }\r\n                else{\r\n                    alertify.error(resJson.data.responseMessage)\r\n                }\r\n              });\r\n          }}\r\n        >\r\n          {(formProps) => (\r\n            <form onSubmit={formProps.handleSubmit} style={{ maxWidth: 250 }}>\r\n              <FormGroup>\r\n                <TextField\r\n                  name=\"nameSurname\"\r\n                  label=\"Ad Soyad\"\r\n                  value={formProps.values.nameSurname}\r\n                  onChange={formProps.handleChange}\r\n                  onBlur={formProps.handleBlur}\r\n                  InputLabelProps={{ shrink: true }}\r\n                />\r\n                <TextField\r\n                  name=\"username\"\r\n                  label=\"Kullanıcı Adı\"\r\n                  value={formProps.values.username}\r\n                  onChange={formProps.handleChange}\r\n                  onBlur={formProps.handleBlur}\r\n                  InputLabelProps={{ shrink: true }}\r\n                />\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"isActive\"\r\n                      value={formProps.values.isActive}\r\n                      checked={formProps.values.isActive}\r\n                      onChange={formProps.handleChange}\r\n                    />\r\n                  }\r\n                  label=\"Aktif mi ?\"\r\n                />\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"isAdmin\"\r\n                      value={formProps.values.isAdmin}\r\n                      checked={formProps.values.isAdmin}\r\n                      onChange={formProps.handleChange}\r\n                    />\r\n                  }\r\n                  label=\"Admin mi ?\"\r\n                />\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"cantSeeBalance\"\r\n                      value={formProps.values.cantSeeBalance}\r\n                      checked={formProps.values.cantSeeBalance}\r\n                      onChange={formProps.handleChange}\r\n                    />\r\n                  }\r\n                  label=\"Bakiye Göremez ?\"\r\n                />\r\n                <Button color=\"primary\" type=\"submit\">\r\n                  Kaydet\r\n                </Button>\r\n              </FormGroup>\r\n            </form>\r\n          )}\r\n        </Formik>\r\n      </Grid>\r\n      <Grid item md={9} xs={12}>\r\n        <MaterialTable\r\n          title=\"Grup Listesi\"\r\n          columns={[\r\n            { title: \"Id\", field: \"id\" },\r\n            { title: \"Adı Soyadı\", field: \"nameSurname\" },\r\n            { title: \"Aktif mi?\", field: \"isActive\" },\r\n            { title: \"Admin mi?\", field: \"isAdmin\" },\r\n            { title: \"Bakiye Göremez?\", field: \"cantSeeBalance\" },\r\n          ]}\r\n          data={users}\r\n          actions={[\r\n            {\r\n              icon: \"edit\",\r\n              tooltip: \"Kullanıcı Güncelle\",\r\n              onClick: (event, rowData) => {\r\n                setselectedUser(rowData as any);\r\n              },\r\n            },\r\n            {\r\n              icon: \"add\",\r\n              tooltip: \"Kullanıcı Ekle\",\r\n              isFreeAction: true,\r\n              onClick: (event) => {setselectedUser(initialUser)},\r\n            },\r\n          ]}\r\n          options={{\r\n            actionsColumnIndex: -1,\r\n            exportButton: true,\r\n            exportCsv: (columns, data) => {\r\n              DownloadExcel(\"Kullanıcı Listesi\", columns, data);\r\n            },\r\n            pageSize: 10,\r\n            pageSizeOptions: [10, 20, 30],\r\n          }}\r\n          localization={{\r\n            pagination: {\r\n              labelDisplayedRows: \"{from}-{to} of {count}\",\r\n            },\r\n            header: {\r\n              actions: \"İşlemler\",\r\n            },\r\n            body: {\r\n              emptyDataSourceMessage: \"No records to display\",\r\n              filterRow: {\r\n                filterTooltip: \"Filter\",\r\n              },\r\n            },\r\n            toolbar: {\r\n              // showColumnsTitle?: string;\r\n              // showColumnsAriaLabel?: string;\r\n              exportTitle: \"Dosyaya Aktar\",\r\n              // exportAriaLabel?: string;\r\n              exportName: \"Excel'e Aktar\",\r\n              searchTooltip: \"Ara\",\r\n              searchPlaceholder: \"Aranacak kelimeyi giriniz\",\r\n            },\r\n          }}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import { injectable } from \"inversify\";\r\nimport \"reflect-metadata\";\r\nimport IAuthService from \"../interfaces/ServiceInterfaces/IAuthService\";\r\nimport * as consts from \"../common/consts\";\r\nimport axios from \"axios\";\r\nimport appConfig from '../config/appConfig';\r\n\r\n\r\n@injectable()\r\nexport default class AuthService implements IAuthService {\r\n  login(user: any): Promise<Response> {\r\n    return axios.post(appConfig.baseApiUrl + \"users/authenticate\",user);\r\n  }\r\n  public isLoggedIn(): boolean {\r\n    var storage = localStorage.getItem(consts.USER_CONTEXT);\r\n    if (storage !== null) {\r\n      return true;\r\n    } else return false;\r\n  }\r\n}\r\n","export const USER_CONTEXT = \"userContext\";","let TYPES = {\r\n    IAuthService: Symbol(\"IAuthService\"),\r\n};\r\n\r\nexport default TYPES;","import { Container } from \"inversify\";\r\nimport AuthService from \"../services/Auth-Service\";\r\nimport IAuthService from \"../interfaces/ServiceInterfaces/IAuthService\";\r\nimport TYPES from \"./types\";\r\n\r\nvar container = new Container();\r\ncontainer.bind<IAuthService>(TYPES.IAuthService).to(AuthService);\r\n\r\nexport default container;","import React, { Component } from \"react\";\r\nimport { Container, Row, Form, Button, Spinner } from \"react-bootstrap\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport logo from \"../../assets/istanbul.png\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as loginActions from \"../../store/actions/loginActions\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport alertify from \"alertifyjs\";\r\nimport container from \"../../ioc/IocContainer\";\r\nimport IAuthService from \"../../interfaces/ServiceInterfaces/IAuthService\";\r\nimport TYPES from \"../../ioc/types\";\r\n\r\nclass Login extends Component<any, any> {\r\n  authService = container.get<IAuthService>(TYPES.IAuthService);\r\n  _isMounted = false;\r\n  state = {\r\n    username: \"\",\r\n    password: \"\",\r\n    isRememberme: false,\r\n    isLoading: false,\r\n    isLoggedIn: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n  }\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n  handleChange = event => {\r\n    let name = event.target.name;\r\n    let value =\r\n      event.target.type === \"checkbox\"\r\n        ? event.target.checked\r\n        : event.target.value;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n  async login() {\r\n    this.setState({ isLoading: true });\r\n    await this.authService\r\n      .login(this.state)\r\n      .then((myJson : any) => {\r\n        if (myJson.data !== null && myJson.data.responseData) {\r\n          alertify.success(\"giriş başarılı\");\r\n          this.props.actions.login(myJson.data.responseData);\r\n          localStorage.setItem(\"userContext\", JSON.stringify(myJson.data.responseData));\r\n          if (this._isMounted) this.setState({ isLoggedIn: true });\r\n        }\r\n      })\r\n      .finally(() => {\r\n        if (this._isMounted) this.setState({ isLoading: false });\r\n      });\r\n  }\r\n\r\n  getLoginButton() {\r\n    if (!this.state.isLoading)\r\n      return (\r\n        <Button variant=\"primary\" type=\"button\" onClick={() => this.login()}>\r\n          Login\r\n        </Button>\r\n      );\r\n    else\r\n      return (\r\n        <Button variant=\"primary\" disabled>\r\n          <Spinner\r\n            as=\"span\"\r\n            animation=\"grow\"\r\n            size=\"sm\"\r\n            role=\"status\"\r\n            aria-hidden=\"true\"\r\n          />\r\n          Login\r\n        </Button>\r\n      );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isLoggedIn === true) {\r\n      return <Redirect to=\"/home\" />;\r\n    }\r\n    return (\r\n      <div className=\"login-main\">\r\n        <Container className=\"login-main-container\">\r\n          <Row className=\"justify-content-md-center\">\r\n            <Form>\r\n              <Image src={logo} fluid style={{width:\"300px\"}} />\r\n              <Form.Group controlId=\"formBasicEmail\">\r\n                <Form.Label>Kullanıcı Adı</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Kullanıcı adı giriniz.\"\r\n                  onChange={this.handleChange}\r\n                  name=\"username\"\r\n                />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"formBasicPassword\">\r\n                <Form.Label>Şifre</Form.Label>\r\n                <Form.Control\r\n                  type=\"password\"\r\n                  placeholder=\"Şifre giriniz.\"\r\n                  onChange={this.handleChange}\r\n                  name=\"password\"\r\n                />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"formBasicCheckbox\">\r\n                <Form.Check\r\n                  name=\"isRememberme\"\r\n                  type=\"checkbox\"\r\n                  label=\"Beni hatırla!\"\r\n                  onChange={this.handleChange}\r\n                />\r\n              </Form.Group>\r\n              {this.getLoginButton()}\r\n            </Form>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    usercontext: state.loginReducer\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      login: bindActionCreators(loginActions.login, dispatch)\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const setCurrencies = (currencies) => ({\r\n  type: actionTypes.SET_CURRENCIES,\r\n  payload: currencies,\r\n});\r\n","import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport * as Icons from \"@material-ui/icons\";\r\nimport { connect } from \"react-redux\";\r\nimport * as sideNavActions from \"../store/actions/sideNavActions\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport * as loginActions from \"../store/actions/loginActions\";\r\nimport { Grid, Badge } from \"@material-ui/core\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport appConfig from \"../config/appConfig\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // display: \"flex\"\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    position: \"relative\",\r\n    display: \"inline\",\r\n    // marginRight: theme.spacing(2)\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    // display: \"flex\",\r\n    // alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    // justifyContent: \"flex-end\"\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n  title: {\r\n    // flexGrow: 1\r\n  },\r\n}));\r\n\r\nfunction TopBar(props) {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const classes = useStyles();\r\n  const logOut = () => {\r\n    props.actions.logout();\r\n  };\r\n  const sideNavOpen = () => {\r\n    props.actions.openSideNav();\r\n  };\r\n  return (\r\n    <AppBar\r\n      position=\"fixed\"\r\n      className={clsx(classes.appBar, {\r\n        [classes.appBarShift]: props.sideNavIsOpen,\r\n      })}\r\n    >\r\n      <Toolbar>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"space-between\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"flex-start\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <IconButton\r\n                  color=\"inherit\"\r\n                  aria-label=\"open drawer\"\r\n                  onClick={() => sideNavOpen()}\r\n                  edge=\"start\"\r\n                  className={clsx(\r\n                    classes.menuButton,\r\n                    props.sideNavIsOpen && classes.hide\r\n                  )}\r\n                >\r\n                  <Icons.Menu />\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h6\" noWrap>\r\n                  {appConfig.projectName}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"flex-start\"\r\n              alignItems=\"center\"\r\n              spacing={2}\r\n            >\r\n              <Typography variant=\"h6\" noWrap>\r\n                Hoşgeldin {props.usercontext.nameSurname}\r\n              </Typography>\r\n              {/* <IconButton>\r\n                <Badge badgeContent={4} color=\"secondary\">\r\n                  <Icons.NotificationsNone />\r\n                </Badge>\r\n              </IconButton> */}\r\n              <div>\r\n                <IconButton\r\n                  aria-label=\"account of current user\"\r\n                  aria-controls=\"menu-appbar\"\r\n                  aria-haspopup=\"true\"\r\n                  onClick={handleMenu}\r\n                  color=\"inherit\"\r\n                >\r\n                  <Icons.AccountCircle />\r\n                </IconButton>\r\n                <Menu\r\n                  id=\"menu-appbar\"\r\n                  anchorEl={anchorEl}\r\n                  anchorOrigin={{\r\n                    vertical: \"top\",\r\n                    horizontal: \"right\",\r\n                  }}\r\n                  keepMounted\r\n                  transformOrigin={{\r\n                    vertical: \"top\",\r\n                    horizontal: \"right\",\r\n                  }}\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                >\r\n                  {appConfig.topBarRightButtons.map((item, index) => (\r\n                    <MenuItem\r\n                      to={\"/\" + item.link}\r\n                      key={index}\r\n                      component={Link}\r\n                      onClick={() => handleClose()}\r\n                    >\r\n                      {item.displayName}\r\n                    </MenuItem>\r\n                  ))}\r\n                  <MenuItem\r\n                    // to=\"/login\"\r\n                    onClick={() => logOut()}\r\n                    color=\"inherit\"\r\n                  >\r\n                    Çıkış\r\n                  </MenuItem>\r\n                </Menu>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    sideNavIsOpen: state.sideNavReducer,\r\n    usercontext: state.loginReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      openSideNav: bindActionCreators(sideNavActions.openSideNav, dispatch),\r\n      closeSideNav: bindActionCreators(sideNavActions.closeSideNav, dispatch),\r\n      login: bindActionCreators(loginActions.login, dispatch),\r\n      setLoginContext: bindActionCreators(\r\n        loginActions.setLoginContext,\r\n        dispatch\r\n      ),\r\n      logout: bindActionCreators(loginActions.logout, dispatch),\r\n    },\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TopBar);\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  IconButton,\r\n  Drawer,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon\r\n} from \"@material-ui/core\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport * as sideNavActions from \"../store/actions/sideNavActions\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport appConfig from \"../config/appConfig\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\"\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen\r\n    })\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen\r\n    })\r\n  },\r\n  menuButton: {\r\n    float: \"right\",\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  hide: {\r\n    display: \"none\"\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    backgroundColor: \"#3f51b5\"\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-end\"\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nfunction SideNav(props) {\r\n  const getIcons = item => {\r\n    if (item.icon)\r\n      return (\r\n        <ListItemIcon>\r\n          <item.icon />\r\n        </ListItemIcon>\r\n      );\r\n  };\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  return (\r\n    <Drawer\r\n      className={classes.drawer}\r\n      variant=\"persistent\"\r\n      anchor=\"left\"\r\n      open={props.sideNavIsOpen}\r\n      classes={{\r\n        paper: classes.drawerPaper\r\n      }}\r\n    >\r\n      <div className={classes.drawerHeader}>\r\n        <IconButton onClick={() => props.actions.closeSideNav()}>\r\n          {theme.direction === \"ltr\" ? (\r\n            <ChevronLeftIcon />\r\n          ) : (\r\n            <ChevronRightIcon />\r\n          )}\r\n        </IconButton>\r\n      </div>\r\n      <Divider />\r\n      <List>\r\n        {appConfig.screenList.map((item, index) => {\r\n          if (item.isVisible === true && (item.onlyAdmin === false || props.userContext.isAdmin===true) \r\n          && ((item.hasBalance && !props.userContext.cantSeeBalance) || !item.hasBalance) )\r\n            return (\r\n              <ListItem\r\n                component={Link}\r\n                tag={Link}\r\n                onClick={() => props.actions.closeSideNav()}\r\n                // to={\"/\" + item.link}\r\n                to={item.link}\r\n                button\r\n                key={index}\r\n              >\r\n                {getIcons(item)}\r\n                <ListItemText primary={item.displayName} />\r\n              </ListItem>\r\n            );\r\n          else return \"\";\r\n        })}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    userContext: state.loginReducer,\r\n    sideNavIsOpen: state.sideNavReducer\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      openSideNav: bindActionCreators(sideNavActions.openSideNav, dispatch),\r\n      closeSideNav: bindActionCreators(sideNavActions.closeSideNav, dispatch)\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SideNav);\r\n","import React from 'react'\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <div>\r\n            Not Found\r\n        </div>\r\n    )\r\n}\r\n","/* eslint-disable @typescript-eslint/no-use-before-define */\r\nimport React from 'react'\r\nimport { Redirect, Route } from 'react-router-dom'\r\nimport { connect } from \"react-redux\";\r\nimport * as loginActions from \"../store/actions/loginActions\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport container from \"../ioc/IocContainer\";\r\nimport IAuthService from \"../interfaces/ServiceInterfaces/IAuthService\";\r\nimport TYPES from \"../ioc/types\";\r\n\r\nconst authService = container.get<IAuthService>(TYPES.IAuthService);\r\n\r\nconst IsLoggedIn = () => {\r\n  return authService.isLoggedIn();\r\n}\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n  \r\n\r\n  const isLoggedIn = IsLoggedIn();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props =>\r\n        isLoggedIn ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\r\n        )\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    usercontext: state.loginReducer\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      login: bindActionCreators(loginActions.login, dispatch),\r\n      setLoginContext : bindActionCreators(loginActions.setLoginContext, dispatch),\r\n      logout: bindActionCreators(loginActions.logout, dispatch)\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PrivateRoute);\r\n","import React, { useEffect } from \"react\";\r\nimport { Row, Col, Container } from \"react-bootstrap\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport * as currencyActions from \"../../store/actions/currencyActions\";\r\nimport * as loginActions from \"../../store/actions/loginActions\";\r\nimport TopBar from \"../../components/TopBar\";\r\nimport SideNav from \"../../components/SideNav\";\r\nimport {Switch } from \"react-router-dom\";\r\nimport NotFound from \"../../pages/NotFound\";\r\nimport DashBoard from \"../dashboard/DashBoard\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport PrivateRouter from \"../../components/PrivateRouter\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport { Backdrop, CircularProgress } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    backgroundColor: \"lightgoldenrodyellow\",\r\n    height: \"1000px\",\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: 0,\r\n    marginTop: 64,\r\n    backgroundColor: \"transparent\",\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: drawerWidth,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nfunction Home(props) {\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    var localstorage = localStorage.getItem(\"userContext\");\r\n    if (localstorage !== null) {\r\n      var context = JSON.parse(localstorage);\r\n      if (context.id > 0) {\r\n        props.actions.setLoginContext(context);\r\n      }\r\n    }\r\n  }, [props.actions]);\r\n  useEffect(() => {\r\n    axios\r\n      .get(appConfig.baseApiUrl + \"currency/GetAllCurrencies\")\r\n      .then((resJson) => props.actions.setCurrencies(resJson.data));\r\n  }, [props.actions]);\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Container fluid={true}>\r\n          <Row>\r\n            <Col>\r\n                <TopBar></TopBar>\r\n                <SideNav></SideNav>\r\n                <main\r\n                  className={clsx(classes.content, {\r\n                    [classes.contentShift]: props.sideNavIsOpen,\r\n                  })}\r\n                >\r\n                  <div className={\"main-container\"}>\r\n                    <Switch>\r\n                      <PrivateRouter exact path=\"/\" component={DashBoard} />\r\n                      {appConfig.screenList.map((item, index) => (\r\n                        <PrivateRouter\r\n                          key={index}\r\n                          path={\"/\" + item.link}\r\n                          component={item.component}\r\n                        />\r\n                      ))}\r\n                      <PrivateRouter exact path=\"/home\" component={DashBoard} />\r\n                      <PrivateRouter component={NotFound} />\r\n                    </Switch>\r\n                  </div>\r\n                </main>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n      <Backdrop open={props.isLoading} style={{ zIndex: 999999 }}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    usercontext: state.loginReducer,\r\n    sideNavIsOpen: state.sideNavReducer,\r\n    isLoading: state.loadingReducer,\r\n    totalRequest: state.totalRequestReducer,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    actions: {\r\n      login: bindActionCreators(loginActions.login, dispatch),\r\n      logout: bindActionCreators(loginActions.logout, dispatch),\r\n      setLoginContext: bindActionCreators(\r\n        loginActions.setLoginContext,\r\n        dispatch\r\n      ),\r\n      setCurrencies: bindActionCreators(\r\n        currencyActions.setCurrencies,\r\n        dispatch\r\n      ),\r\n    },\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const setIsLoading = (isLoading) => ({\r\n  type: actionTypes.SET_ISLOADING,\r\n  payload: isLoading,\r\n});\r\n","/* eslint-disable @typescript-eslint/no-unused-expressions */\nimport React, { Component } from \"react\";\nimport Login from \"./pages/login/Login\";\nimport {Route, Switch } from \"react-router-dom\";\nimport Home from \"./pages/main/Home\";\nimport NotFound from \"./pages/NotFound\";\nimport PrivateRouter from \"./components/PrivateRouter\";\nimport axios from \"axios\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport * as loadingActions from \"./store/actions/loadingActions\";\nimport * as loginActions from \"./store/actions/loginActions\";\n\nvar activeRequestCount = 0;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    axios.interceptors.request.use(\n      function (config) {\n        activeRequestCount++;\n        if (activeRequestCount === 1) props.actions.setIsLoading(true);\n\n        var context = localStorage.getItem(\"userContext\");\n        config.headers[\"Content-Type\"] = \"application/json\";\n        if (context !== null) {\n          var user = JSON.parse(context);\n\n          config.headers.Authorization = \"Bearer \" + user.token;\n        }\n        return config;\n      },\n      function (error) {\n        return Promise.reject(error);\n      }\n    );\n\n    axios.interceptors.response.use(\n      (response) => {\n        activeRequestCount--;\n        if (activeRequestCount === 0) {\n          props.actions.setIsLoading(false);\n        }\n\n        return response;\n      },\n      (error) => {\n        activeRequestCount--;\n        if (activeRequestCount === 0) {\n          props.actions.setIsLoading(false);\n        }\n        return Promise.reject(error);\n      }\n    );\n\n    this.state = {\n      data: {},\n      users: [],\n    };\n  }\n\n  isLoggedIn(): boolean {\n    return false;\n  }\n  render() {\n    return (\n      <div>\n          <div className={\"main-container\"}>\n            <Switch>\n              <Route path=\"/login\" component={Login} />\n              <PrivateRouter path=\"/\" component={Home}></PrivateRouter>\n              <PrivateRouter exact path=\"/\" component={Home}></PrivateRouter>\n              <Route component={NotFound} />\n            </Switch>\n          </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    usercontext: state.loginReducer,\n    sideNavIsOpen: state.sideNavReducer,\n    isLoading: state.loadingReducer,\n    totalRequest: state.totalRequestReducer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      login: bindActionCreators(loginActions.login, dispatch),\n      logout: bindActionCreators(loginActions.logout, dispatch),\n      setLoginContext: bindActionCreators(\n        loginActions.setLoginContext,\n        dispatch\n      ),\n      setIsLoading: bindActionCreators(loadingActions.setIsLoading, dispatch),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default {\r\n    isNavOpen : true,\r\n    userContext:{}\r\n}\r\n\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport initialStates from './initialStates';\r\n\r\nconst loginReducer = (state = initialStates.userContext, action) => {\r\n  let newState = state;\r\n  switch (action.type) {\r\n    case actionTypes.LOGIN:\r\n      localStorage.setItem(\"userContext\", action.payload);\r\n      return (newState = action.payload);\r\n    case actionTypes.LOGOUT:\r\n      localStorage.removeItem(\"userContext\");\r\n      return (newState = {});\r\n    case actionTypes.SET_LOGIN_CONTEXT:\r\n      return (newState = action.payload);\r\n    default:\r\n      return newState;\r\n  }\r\n};\r\n\r\nexport default loginReducer;\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport initialStates from './initialStates';\r\n\r\nconst sideNavReducer = (state = initialStates.isNavOpen, action) => {\r\n  let newState = state;\r\n  switch (action.type) {\r\n    case actionTypes.SIDE_NAV_OPEN:\r\n      return (newState = action.payload);\r\n    case actionTypes.SIDE_NAV_CLOSE:\r\n      return (newState = action.payload);\r\n    default:\r\n      return newState;\r\n  }\r\n};\r\n\r\nexport default sideNavReducer;\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst loadingReducer = (state = false, action) => {\r\n  let newState = state;\r\n  switch (action.type) {\r\n    case actionTypes.SET_ISLOADING:\r\n      return (newState = action.payload);\r\n    default:\r\n      return newState;\r\n  }\r\n};\r\n\r\nexport default loadingReducer;\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\n\r\nconst currencyReducer = (state = [], action) => {\r\n  let newState = state;\r\n  switch (action.type) {\r\n    case actionTypes.SET_CURRENCIES:\r\n      return (newState = action.payload);\r\n    default:\r\n      return newState;\r\n  }\r\n};\r\n\r\nexport default currencyReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport loginReducer from \"./loginReducer\";\r\nimport sideNavReducer from \"./sideNavReducer\";\r\nimport loadingReducer from './loadingReducer';\r\nimport currencyReducer from './currencyReducer';\r\n\r\nconst reducers = combineReducers({\r\n    loginReducer:loginReducer,\r\n    sideNavReducer:sideNavReducer,\r\n    loadingReducer:loadingReducer,\r\n    currencyReducer:currencyReducer,\r\n});\r\n\r\nexport default reducers;","import {createStore} from 'redux';\r\nimport reducers from './index'\r\n\r\nconst configureStore = ()=>{\r\n    return createStore(reducers);\r\n}\r\n\r\nexport default configureStore","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store/reducers/cofigureStore\";\nimport {\n  MuiThemeProvider,\n  createMuiTheme,\n  responsiveFontSizes,\n} from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport \"alertifyjs/build/css/alertify.min.css\";\nimport { HashRouter } from \"react-router-dom\";\n// import { BrowserRouter } from \"react-router-dom\";\n\nconst theme = responsiveFontSizes(\n  createMuiTheme({\n    palette: {\n      background:{default:\"#fafafa\",paper:\"#fafafa\"},\n      primary: {\n        main: \"#26a69a\",\n      },\n      secondary: {\n        main: \"#9A0036\",\n      },\n    },\n  })\n);\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline/>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </MuiThemeProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}